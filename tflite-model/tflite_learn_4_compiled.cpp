/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 31.03.2025 14:15:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 24037, -27714, -26327, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.0002063825522782281, 0.00020044280972797424, 0.00021491067309398204, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 93,78,124,-71,-46,6,-18,50,-10,64,28,-19,-41,-93,91,25,-57,72,77,122,-26,-34,32,-86,-127,95,-61,29,97,22,-20,4, 
  /* [1][0][][] */ 52,-41,-73,23,-15,127,-37,-11,121,-66,-3,-92,-65,108,34,-57,93,-47,-5,-99,-114,23,116,63,21,26,-8,-26,-74,-53,-4,-27, 
  /* [2][0][][] */ -28,72,-76,72,76,-39,-29,104,87,28,119,-19,-92,-84,77,112,-79,-48,-1,-109,68,112,-58,-84,86,-50,-16,-127,7,-76,79,-28, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0033294395543634892, 0.0032336176373064518, 0.0034670184832066298, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 81, 84, 35, -92, -124, 100, 6, 36, 73, 363, 56, 878, -288, 179, -460, 70, 135, -298, -295, -66, -309, 89, 201, -112, 122, 79, -248, 421, 335, -15, -361, 215, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.9920796552905813e-05, 4.2687679524533451e-05, 3.885868500219658e-05, 4.5163440518081188e-05, 4.0187827835325152e-05, 4.0593738958705217e-05, 4.0770544728729874e-05, 4.1219143895432353e-05, 4.1762130422284827e-05, 4.2347866838099435e-05, 4.196024383418262e-05, 4.7391171392519027e-05, 4.1649684135336429e-05, 4.2306277464376763e-05, 4.3082392949145287e-05, 4.0535331208957359e-05, 3.9780956285540015e-05, 4.2241164919687435e-05, 4.1661864088382572e-05, 4.0522176277590916e-05, 4.1791623516473919e-05, 4.1171297198161483e-05, 4.3709958845283836e-05, 4.176250149612315e-05, 4.2722149373730645e-05, 4.1257666453020647e-05, 4.1482500819256529e-05, 4.1742765461094677e-05, 4.0958700992632657e-05, 4.0702896512812003e-05, 4.1895968024618924e-05, 4.6716893848497421e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -34,-50,111,22,117,0,-95,-104,71,-101,-116,0,52,14,-34,58,-61,-35,-73,-61,-77,-112,4,116,-120,5,83,-53,116,-7,-16,-79,96,-61,-89,74,-121,-73,-95,31,89,-94,-112,109,67,-114,127,-17,25,-63,-41,110,-84,-47,-104,121,30,68,125,-118,-80,88,-56,52,-1,16,76,104,94,96,88,-126,106,-85,45,90,-121,13,-65,42,61,21,100,-2,-59,-41,-93,108,29,127,-15,-125,17,72,41,12, 
  /* [1][0][][] */ -71,23,-72,-5,-34,76,42,-4,81,-114,-102,114,63,-20,27,69,113,-35,40,127,-43,-3,36,32,40,23,-37,110,17,13,85,-62,59,106,-9,17,55,64,-22,-62,-60,11,-29,-105,-35,37,-28,-52,-25,-78,117,65,13,88,-73,-59,30,88,66,86,-52,118,-61,-74,-52,39,80,44,108,20,23,15,-108,101,-52,48,93,-46,-37,57,-77,92,-43,-121,29,119,-72,-61,86,86,103,29,90,93,28,-8, 
  /* [2][0][][] */ 63,39,-68,114,-30,-55,100,104,-103,90,-38,123,91,-21,96,-121,-67,-29,35,55,-114,-14,122,22,-21,84,115,7,-83,77,87,100,-75,-22,-96,-125,-100,111,114,-23,-127,-86,15,-10,-79,126,-15,-80,112,29,93,-102,-55,71,23,22,-73,101,-73,4,-27,66,-41,72,97,48,56,109,-104,73,6,-86,34,-79,32,30,-69,-29,7,14,41,-109,-20,-50,1,-107,-23,-41,93,125,-31,0,-57,-94,-52,-75, 
  /* [3][0][][] */ 68,0,37,-34,-62,39,-108,35,43,23,61,8,101,98,66,2,101,96,-52,16,118,-84,-61,-108,-34,-103,-78,104,45,-82,82,7,-53,-31,-15,-11,-86,-28,37,43,-26,-85,-92,2,59,29,-59,-85,64,-71,33,1,94,30,82,-99,-109,-108,-127,-55,-81,28,-30,76,64,-31,-59,-33,-43,-65,11,104,25,-109,55,-46,44,95,92,-60,-86,-111,45,91,27,43,-39,-106,-72,41,6,-102,97,-92,-91,41, 
  /* [4][0][][] */ 42,91,-7,50,-19,-29,34,0,58,82,-6,51,10,-33,-15,-66,-29,-2,-86,24,115,-99,90,27,-13,2,69,-74,-49,48,-75,-49,68,126,17,-127,-52,-5,-124,53,-52,-62,-80,-96,35,118,38,59,20,-39,-11,-73,-106,55,-91,-1,41,-97,17,19,20,-95,-33,-63,-39,63,0,-42,36,-114,-109,-83,-52,30,110,53,76,-25,-8,-81,7,-38,-99,-17,0,75,96,9,-126,-78,45,55,42,82,-105,-20, 
  /* [5][0][][] */ 99,-90,86,85,44,-126,10,63,114,-115,-3,-91,31,106,27,40,64,49,-93,91,34,49,22,-34,-114,-72,-36,-95,31,22,22,-99,-41,7,-84,26,-117,-48,53,7,-98,-51,45,108,-43,30,15,-73,-107,96,20,20,42,19,19,-25,100,57,-73,-41,35,-85,19,-80,-47,108,-38,13,70,2,108,-71,-57,68,-30,-72,0,-48,-1,98,108,42,29,122,-84,84,-1,43,71,-127,105,100,-18,13,62,-89, 
  /* [6][0][][] */ 47,-40,121,90,-90,-46,1,86,-9,-81,11,-96,90,58,127,-119,45,3,1,101,-84,-121,118,64,-52,-86,-8,-60,-30,-126,56,-80,-91,-119,-38,-101,-9,51,-106,92,95,60,30,-14,-105,113,-79,-41,-85,13,-27,-68,64,-49,99,-24,19,-3,-71,123,-104,4,75,-76,-51,71,110,-42,104,0,-110,-7,59,-70,-89,-41,-89,-103,-56,-14,37,-28,42,-25,-71,-85,-40,-101,87,102,99,18,-57,-68,84,-24, 
  /* [7][0][][] */ 106,54,-38,-50,-68,114,-18,-23,120,-13,-100,23,61,-85,48,78,57,22,1,127,63,38,-5,92,-69,111,46,62,-76,121,-26,41,27,27,68,83,-107,90,-27,-28,100,-76,87,71,49,-1,104,-117,55,-50,-112,-66,-24,94,22,25,122,-98,8,-58,17,-7,89,-111,-64,-54,72,24,-111,19,73,95,94,33,63,63,-56,58,-101,25,98,-30,-10,-77,91,35,-114,104,91,9,99,72,-50,-44,-4,-72, 
  /* [8][0][][] */ 5,38,-43,-98,70,18,-78,-20,5,44,47,100,12,-40,-90,-72,-69,100,-66,25,37,-26,87,114,-117,100,47,81,-68,30,-90,127,99,-29,46,3,124,1,-17,70,83,110,-112,-117,-15,-24,-31,108,24,-86,-62,2,-63,-3,-33,-113,48,115,-96,110,123,38,47,118,-26,-43,-23,96,-85,55,37,5,83,75,11,26,-39,113,86,82,38,90,-109,-82,28,44,80,-36,42,-40,-82,111,-75,-108,-53,63, 
  /* [9][0][][] */ 33,21,126,61,79,-127,-43,-100,49,51,1,59,-30,-72,-89,-27,14,8,-97,-51,14,111,-103,-98,115,1,-1,33,-8,-66,-78,106,60,8,20,-11,-76,38,-21,-32,62,-59,73,-86,98,32,-77,63,51,-11,-65,-51,76,-66,-50,123,79,-55,10,-6,-81,114,111,-61,-93,8,116,63,-46,120,119,-86,17,105,-97,-91,-84,-115,-32,119,39,28,115,37,-37,-83,46,-18,109,42,-27,109,114,5,72,-19, 
  /* [10][0][][] */ -77,71,95,-74,-10,100,113,10,37,22,26,-65,106,90,-36,14,-34,87,-99,-56,-14,30,59,-69,37,60,-117,-114,-45,90,-101,-79,89,105,121,51,-39,7,-41,37,-35,123,-116,-38,-102,-57,-5,-61,-1,10,41,16,65,26,-62,-43,-102,-18,34,-44,6,79,119,49,127,-74,-99,-24,25,-25,-93,-63,94,74,-84,112,-6,67,71,0,82,6,65,108,-103,71,104,-20,42,12,3,-66,-47,-52,-48,-71, 
  /* [11][0][][] */ 116,29,4,111,109,69,74,42,118,100,-52,127,5,-57,51,-45,-29,-71,84,53,45,91,39,-76,-87,-74,7,85,101,-9,41,-14,-59,-57,78,53,-40,96,-10,-31,2,110,-48,18,-17,-41,-57,-53,87,109,119,64,-63,-77,42,42,-29,-43,-1,-64,-55,106,102,24,47,93,-27,54,114,71,-61,-50,53,123,-73,64,-59,47,-17,89,-76,1,-53,-33,63,-47,28,-17,-66,23,33,-93,-55,-2,-33,-19, 
  /* [12][0][][] */ 15,65,-63,-5,83,10,-44,31,-84,54,-23,12,-50,5,44,-88,-108,-42,-53,-91,21,-17,11,94,-76,-58,96,-108,90,6,-43,112,-97,-81,-54,10,-10,-83,-24,37,112,33,-120,-47,-26,-93,-46,116,-53,-126,-85,101,32,-8,-91,87,-27,-67,51,61,52,117,-12,48,107,26,-54,115,53,100,37,67,79,111,-23,-12,-46,29,-127,-103,-66,99,42,8,-44,27,49,110,-103,-118,87,38,96,-17,28,76, 
  /* [13][0][][] */ 114,-52,111,96,98,117,73,71,76,-97,8,-39,103,77,61,-49,-118,-79,-80,20,72,-34,127,-56,-65,35,-4,24,-100,-99,92,44,52,115,-26,47,-79,-35,30,62,-66,85,-50,20,-43,37,-14,-42,47,94,-39,-116,-98,38,91,-80,-54,37,-44,-71,-24,112,-90,20,-62,-62,-102,80,-43,-9,96,5,-99,29,-73,-35,-117,75,74,-50,49,-98,98,32,-78,-101,102,121,-11,-65,-86,60,118,-62,60,-5, 
  /* [14][0][][] */ -61,-108,78,57,71,-37,-27,-122,-89,-45,58,73,-30,-91,-102,-96,-62,-72,4,19,-50,22,-11,51,-124,-78,-44,21,-124,-121,-87,31,94,-34,-44,-3,86,111,26,-123,-13,-122,27,80,59,-120,58,-95,105,30,77,43,87,-23,-27,7,-58,8,46,87,-18,-91,-35,65,-99,-25,67,-117,-99,-95,-97,88,-4,76,40,-83,46,-117,44,26,33,-30,-121,-41,-127,-100,-123,96,100,-3,78,-55,78,94,-20,60, 
  /* [15][0][][] */ 9,-37,-27,77,107,-95,72,-113,63,-13,-69,22,116,13,-91,-113,101,20,-91,38,62,25,80,122,91,81,50,105,33,73,63,-100,6,12,-63,-13,-65,123,110,-65,22,126,-50,-26,29,-78,-41,-80,-7,-71,4,41,-99,-101,-44,-11,77,51,-43,122,-34,-66,11,119,-26,110,-70,8,-57,8,75,-68,29,-4,67,-110,12,62,119,69,-80,73,-98,-65,-124,-33,-95,49,101,82,-106,-37,70,122,-109,127, 
  /* [16][0][][] */ -68,10,119,-64,42,127,-65,53,56,63,-119,67,-6,-50,-61,-66,118,77,71,62,123,80,-31,50,-39,54,-80,74,-116,7,56,15,-107,91,60,75,-29,54,-46,-80,20,-45,84,108,65,119,104,-20,-51,-127,5,113,-40,124,64,55,25,108,69,15,126,116,28,65,52,13,-45,95,46,113,-38,-4,24,92,72,104,-22,117,-124,1,11,-95,63,26,18,108,120,8,83,6,-25,124,76,-37,-92,29, 
  /* [17][0][][] */ 55,-117,25,80,-48,-120,-73,-104,40,-96,82,45,94,56,-122,45,27,49,100,113,-102,-19,9,-59,23,64,-86,21,102,-60,-38,73,-36,-28,28,0,-56,98,-95,-35,-102,-47,-22,-16,6,8,85,-118,82,102,-20,21,-26,77,96,-80,-127,83,-88,-120,26,-101,72,95,-90,-81,38,-107,-115,-8,105,23,10,-124,-72,62,112,-55,37,-61,5,-21,-86,-100,-121,68,77,-40,13,73,-106,-123,-19,92,8,11, 
  /* [18][0][][] */ -102,96,105,-73,-11,-109,-109,0,-8,71,-116,-53,-42,29,57,-64,16,-30,55,-18,98,-53,16,-87,27,-104,-23,108,27,33,-5,42,41,-35,-105,-115,-39,30,-40,68,-47,-7,-57,-15,-122,10,23,-9,12,-17,68,29,-117,-14,3,83,-49,30,-12,-126,81,107,9,31,-72,-127,-38,97,76,-85,-80,106,-106,-34,-96,-112,53,51,-7,-83,-64,-13,-34,-74,98,-41,66,67,-117,-82,-48,106,85,-53,52,-27, 
  /* [19][0][][] */ 40,32,80,49,57,-44,105,110,102,-67,33,-9,-103,36,-51,66,81,-110,119,61,-23,89,-56,17,80,-85,33,-69,-94,-127,-64,44,84,-85,44,1,9,-67,-49,-98,50,-124,-80,12,-75,31,89,-89,-30,40,-39,50,-34,20,8,-6,37,105,0,-25,57,-54,120,66,-42,-2,-23,10,35,64,82,-58,-64,-95,-41,-82,-28,-117,19,117,62,-119,-29,81,-88,-1,10,-6,95,37,-3,61,-34,126,80,-43, 
  /* [20][0][][] */ -10,66,65,95,-82,94,31,55,10,8,-85,19,-11,88,44,-72,-53,-25,-56,-19,23,-44,-83,-69,85,-66,-94,46,38,27,-47,114,99,41,-8,51,38,-29,-19,-100,-84,-39,-93,-109,-28,-70,-59,117,56,-107,-97,52,47,115,65,-2,101,70,108,89,115,-51,-54,-34,-15,-68,-44,25,-78,-79,-67,78,-55,-73,30,14,127,74,122,101,92,12,89,-33,57,117,-20,78,22,112,44,67,26,35,4,8, 
  /* [21][0][][] */ 87,75,75,-113,108,-87,78,9,-6,-69,-74,48,11,45,-55,-93,-106,-27,29,-6,117,-51,75,-85,62,-85,-32,78,19,13,-10,-17,9,24,-96,-121,118,101,-124,-34,-6,11,28,-13,-105,-83,-85,95,-23,-63,-4,95,38,77,-96,22,-53,54,-51,127,65,-83,19,-7,91,36,-37,-75,-108,-5,65,86,39,-16,76,71,-107,-30,67,103,16,110,42,-73,27,-99,68,-81,-105,83,120,-114,-40,-71,66,-34, 
  /* [22][0][][] */ 35,-48,-65,-94,89,-42,99,62,-90,93,-70,-104,119,-105,-110,-81,42,83,-107,-77,92,-69,37,34,79,-3,-123,105,-74,-78,-58,-102,57,67,27,19,9,-14,-54,-127,4,-7,7,99,57,-109,80,-24,-54,-89,7,-21,-59,-85,-68,37,-16,-25,-43,-25,113,-78,-81,-108,-69,22,-109,-58,94,108,-19,3,-64,-4,67,-84,48,-45,65,103,108,-92,-70,-109,83,87,103,-28,-51,30,-89,64,24,13,-58,102, 
  /* [23][0][][] */ 66,-93,0,61,95,-105,0,-106,57,-87,84,69,10,-117,16,-42,85,-40,-117,94,85,-88,103,-41,-18,-21,79,15,64,38,70,-44,-40,43,20,37,95,-8,-120,2,-112,-6,1,-117,-73,-99,115,24,78,-123,-97,-59,76,-64,-63,86,-85,-23,96,44,-127,-100,-61,-19,27,33,-124,-116,61,-25,109,-83,-12,-42,-43,-102,37,-27,92,127,-61,-58,11,-112,92,4,112,-28,-102,39,100,-13,99,-62,-36,77, 
  /* [24][0][][] */ -73,-48,-100,-82,-75,-112,-67,-88,66,124,85,51,125,67,-40,-116,-79,46,34,-47,102,-79,-52,-35,32,-22,77,63,111,65,8,-54,-2,19,56,36,-49,-89,67,-23,-74,-95,107,9,19,-30,36,71,-87,-40,-22,22,76,78,74,-73,-3,84,25,5,98,-4,34,101,-103,104,-45,-98,-127,56,-55,-21,-37,33,95,107,71,-72,-103,-67,-76,-92,-60,-105,6,66,-10,-92,31,-108,11,-65,-12,34,-115,34, 
  /* [25][0][][] */ -100,-52,-79,-2,98,-72,-113,62,56,-104,-40,20,68,-5,-114,-20,-81,56,30,-119,64,84,-10,-65,19,-58,-112,37,74,-100,52,125,96,-116,42,82,105,-63,-22,-27,-87,103,-112,11,108,48,65,37,-100,90,-78,0,42,-25,-67,13,-33,55,-113,76,118,47,41,43,-9,80,-22,-22,-92,-14,-33,-120,30,-122,71,26,65,77,11,27,50,50,-60,94,-74,-54,-101,-94,-32,-47,93,28,-127,-20,-11,-105, 
  /* [26][0][][] */ 58,-120,-27,-14,-104,3,-14,-12,-112,-127,108,84,-79,-53,8,-17,115,28,-84,-73,11,72,101,11,52,64,11,45,10,3,-96,-4,-30,-64,-100,-92,-71,87,-57,112,-104,103,56,30,-77,73,-44,104,-24,26,-5,101,10,-50,-8,-110,102,72,54,25,-2,-100,65,-25,116,-23,-60,59,-89,81,87,97,80,-103,-91,5,43,-114,-102,27,-32,75,81,-78,80,-1,-48,11,-88,116,5,16,-61,119,55,92, 
  /* [27][0][][] */ 34,30,-51,-71,-125,-68,-60,11,75,112,50,-77,-8,65,102,-17,74,-8,88,-88,-87,24,-20,-14,-101,68,-97,9,76,26,-11,-7,72,79,-82,-68,-87,-50,-82,102,-81,27,52,29,120,39,86,122,105,102,99,-74,-83,-82,4,-6,100,-11,-96,-74,-51,-33,-37,59,35,-33,-102,120,64,39,-124,12,63,-46,-10,-78,41,-61,102,127,104,-21,125,-43,-56,-76,-15,38,-41,13,-30,-52,66,53,114,86, 
  /* [28][0][][] */ 112,3,97,55,-123,-40,-90,-61,-35,-98,70,111,-92,-90,38,108,105,121,-73,113,-26,34,-109,-65,-117,89,-79,-58,-30,-80,1,-18,-102,18,122,76,22,-81,-18,44,127,48,-86,57,-91,-8,44,90,29,-45,-75,-31,-86,23,95,58,96,-15,122,56,-9,-7,-87,2,83,80,-11,114,-47,39,-106,-43,81,74,16,-101,-124,-63,-80,46,-75,-87,117,-32,70,-105,71,-85,-106,-31,-4,-67,-48,68,-64,-63, 
  /* [29][0][][] */ 68,55,60,-46,-96,31,-118,9,109,-16,-91,-93,107,-111,-43,-46,-102,109,32,-72,-81,-31,59,9,-35,9,-42,-29,-104,-13,110,-6,56,1,-74,-61,-10,114,-10,105,55,112,-46,86,8,109,-46,-19,21,-8,59,-98,76,-106,122,55,-94,58,-51,115,-127,111,-99,-56,-67,-66,60,101,103,-89,35,-78,116,80,64,27,115,-64,-28,32,-3,-90,-12,-83,70,126,46,80,-40,106,73,82,-111,26,4,63, 
  /* [30][0][][] */ 21,-74,-72,29,-101,23,-74,-23,110,-21,-10,-45,-103,15,51,11,-11,29,95,-112,38,-111,-121,5,-119,16,-77,115,-15,-111,-100,-1,-91,-80,-126,-60,11,-26,-13,17,83,-86,-20,93,98,-53,97,53,-80,76,17,-110,96,-60,-19,96,-83,-57,-85,-57,-108,-12,-79,-29,-114,-97,-105,86,-65,107,48,-41,-92,100,36,-94,-61,-78,-85,-68,22,27,-110,-25,-118,22,-114,104,-43,-127,72,55,-35,-10,4,-77, 
  /* [31][0][][] */ 108,-79,41,93,45,68,-45,-58,-27,-14,-69,-53,91,-111,-32,104,-40,-78,65,47,77,43,-22,112,42,-103,44,70,-58,-68,54,101,21,21,-76,-4,96,-20,-27,-98,64,-60,-19,36,10,-49,-25,30,71,45,96,-22,-90,-52,-66,52,-103,62,25,109,-32,32,84,-67,66,106,-31,-69,69,-100,-97,12,-90,-36,10,11,-55,-36,54,81,-62,-37,84,67,60,100,-86,17,49,-38,-72,-51,15,127,17,7, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0016966337570920587, 0.0018142262706533074, 0.0016514940652996302, 0.0019194461638107896, 0.0017079826211556792, 0.0017252338584512472, 0.0017327481182292104, 0.0017518135719001293, 0.0017748904647305608, 0.001799784367904067, 0.0017833103192970157, 0.0020141247659921646, 0.0017701114993542433, 0.0017980168340727687, 0.0018310016021132469, 0.0017227515345439315, 0.0016906906384974718, 0.0017952494090422988, 0.0017706291982904077, 0.0017221923917531967, 0.0017761439085006714, 0.0017497800290584564, 0.0018576731672510505, 0.0017749062972143292, 0.0018156912410631776, 0.0017534508369863033, 0.00176300632301718, 0.0017740675248205662, 0.0017407448031008244, 0.0017298730090260506, 0.0017805786337703466, 0.0019854679703712463, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2329, 3699, 6291, 2599, -2514, -4107, 21118, 1925, 2873, -1503, 10198, -267, -9063, 2141, 12448, 5438, 15902, 5525, -4638, -5671, 4291, 26433, 18090, 13414, 1020, 773, 4534, 3220, 2393, -4385, 5963, -2880, -263, 3801, 67, 1083, 10168, 5007, -1670, 4108, 7456, 4795, 5265, 11609, 3673, 4281, 1916, 6948, 4530, -5923, -6452, 572, -304, -999, 2167, -8, 214, -671, -3966, 9810, -809, 1444, -1202, -1636, -3274, 7231, 21963, 1606, -2216, 903, 1441, 2018, 1445, -1067, 681, 10802, -521, 14517, 15544, -1070, 8440, 1707, -510, 1302, 15217, 8432, 3629, 1500, 6037, 3390, -397, -7983, 665, -1801, -1349, -2004, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00026832401636056602, 0.0004252617945894599, 0.00038102469989098608, 0.00033767838613130152, 0.00041381650953553617, 0.00036050923517905176, 0.00015771710604894906, 0.00038120654062367976, 0.00021254995954222977, 0.00044159157550893724, 0.00019365370098967105, 0.00029814787558279932, 0.0002800364454742521, 0.0013174752239137888, 0.00024813160416670144, 0.00021172642300371081, 0.00011770179844461381, 0.00026213302044197917, 0.00042143341852352023, 0.00030057859839871526, 0.00014455916243605316, 0.00010283572191838175, 0.00016988490824587643, 0.0001245331804966554, 0.00018118711886927485, 0.00063954532379284501, 0.0006565022049471736, 0.00033815662027336657, 0.00021745976118836552, 0.00044557495857588947, 0.00024673025473020971, 0.00026870131841860712, 0.00020787194080185145, 0.00030480467830784619, 0.00032212623045779765, 0.00022549407731276006, 0.00018768376321531832, 0.00021545671916101128, 0.00037511554546654224, 0.0004297896521165967, 0.00017104455037042499, 0.00054252188419923186, 0.0002888584858737886, 0.00020008922729175538, 0.00052440282888710499, 0.00023569664335809648, 0.00026005407562479377, 0.00030709238490089774, 0.0002975465904455632, 0.00022439486929215491, 0.00024574808776378632, 0.00017584660963620991, 0.00051528087351471186, 0.0003027655475307256, 0.00035781352198682725, 0.00038845025119371712, 0.0004781366151291877, 0.00038239636342041194, 0.00038688344648107886, 0.0001880574127426371, 0.00090466637630015612, 0.000450924999313429, 0.00022304596495814621, 0.00047671451466158032, 0.00057442556135356426, 0.00026463982067070901, 9.8790427728090435e-05, 0.00024449345073662698, 0.00052103103371337056, 0.00036935944808647037, 0.00028005210333503783, 0.00025188736617565155, 0.00093084940453991294, 0.00041262083686888218, 0.00025333499070256948, 0.00020020360534545034, 0.00027054976089857519, 0.00012921463348902762, 0.00011765886301873252, 0.00019487729878164828, 0.00017453586042392999, 0.00019474832515697926, 0.00018549223023001105, 0.00018664008530322462, 0.00011922623525606468, 0.00028205578564666212, 0.00064209714764729142, 0.00018994421407114714, 0.00011829990398837253, 0.00060858152573928237, 0.00025626021670177579, 0.00024798736558295786, 0.00030937950941734016, 0.00056083349045366049, 0.00046621251385658979, 0.0002014007477555424, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -27,96,-4,-127,-49,-33,-32,-74,-17,19,0,87,26,-64,-11,49, 
  /* [1][0][][] */ -24,23,-55,2,-24,-33,20,-71,50,42,-66,15,10,8,33,-127, 
  /* [2][0][][] */ -13,7,-41,42,29,13,-40,-64,127,-22,-9,12,-23,76,-68,17, 
  /* [3][0][][] */ 53,-60,14,-126,4,-24,-19,-3,112,2,88,56,6,59,32,127, 
  /* [4][0][][] */ -75,35,3,35,-3,-24,8,29,12,13,11,-28,-127,-13,-9,29, 
  /* [5][0][][] */ 1,69,110,10,28,69,-80,79,-57,66,-28,-38,27,-45,-127,18, 
  /* [6][0][][] */ 36,-59,120,-125,49,-13,-49,121,-86,-127,61,-49,-3,97,-30,88, 
  /* [7][0][][] */ 37,96,-24,-47,81,10,7,-48,127,96,-31,22,28,-10,59,39, 
  /* [8][0][][] */ 9,-97,8,-83,28,-63,25,-72,30,59,73,-14,11,127,74,64, 
  /* [9][0][][] */ 11,-31,1,127,48,-4,35,-57,-70,108,35,-22,-2,-59,-10,-9, 
  /* [10][0][][] */ -7,22,-50,-127,2,-1,-1,28,40,-25,14,-18,-16,-47,8,27, 
  /* [11][0][][] */ 8,12,22,-19,87,-35,91,-60,-86,31,-6,25,-3,127,-84,-33, 
  /* [12][0][][] */ 57,-27,-105,-2,32,-73,35,25,23,50,-81,-59,-42,127,-20,22, 
  /* [13][0][][] */ -14,5,-24,10,5,-127,-1,17,4,-15,5,-4,8,-15,7,10, 
  /* [14][0][][] */ 26,-26,97,-41,53,13,-127,-87,-25,-34,35,28,17,-52,-3,-31, 
  /* [15][0][][] */ -70,16,-17,-45,1,8,127,59,-36,48,68,-22,19,86,54,-1, 
  /* [16][0][][] */ 24,68,127,106,-4,13,97,83,-83,16,-81,-13,23,2,1,-85, 
  /* [17][0][][] */ -45,-121,-19,37,-76,-27,-58,16,-127,-30,11,-55,-10,36,56,-40, 
  /* [18][0][][] */ 0,51,11,62,47,12,18,-3,73,48,-23,-27,18,127,66,21, 
  /* [19][0][][] */ 5,-19,38,21,109,26,-110,-66,-102,-82,-31,-127,-44,-44,4,-42, 
  /* [20][0][][] */ 78,-37,-65,-18,4,-127,23,32,-35,40,-115,-28,9,-4,5,-11, 
  /* [21][0][][] */ 76,-31,62,-12,-21,3,4,78,4,-78,65,47,7,127,47,75, 
  /* [22][0][][] */ -34,37,-51,127,-60,-4,99,61,3,30,-13,30,-15,-1,30,8, 
  /* [23][0][][] */ 66,-1,76,-52,52,-24,-3,35,27,23,-14,-31,6,-16,-127,9, 
  /* [24][0][][] */ -127,46,13,-20,6,105,20,-20,-9,15,103,-11,-72,13,61,-27, 
  /* [25][0][][] */ 23,22,10,26,13,5,69,-47,0,-127,-14,-23,-15,-28,8,21, 
  /* [26][0][][] */ -36,-4,1,6,-54,-7,-41,-38,-112,-30,4,-31,14,127,-30,52, 
  /* [27][0][][] */ -3,27,5,70,38,-34,-15,-28,55,1,-31,-5,3,127,-16,15, 
  /* [28][0][][] */ 26,71,58,63,127,-10,36,34,-95,-20,-57,-30,22,100,46,-44, 
  /* [29][0][][] */ -2,-6,3,19,28,-7,8,39,-18,-19,-13,-127,-1,-9,-14,6, 
  /* [30][0][][] */ -19,78,-42,67,-41,-13,38,-127,-42,60,-13,2,58,39,82,85, 
  /* [31][0][][] */ -33,-26,-6,-80,-10,6,-56,-114,16,87,-19,-127,-27,-48,6,22, 
  /* [32][0][][] */ -127,-74,-9,65,57,30,-14,13,-8,-50,-100,38,67,0,56,69, 
  /* [33][0][][] */ -17,-39,-49,3,-92,-16,-79,6,74,16,14,-56,22,-127,123,30, 
  /* [34][0][][] */ 45,-8,60,29,49,12,-43,87,-82,-51,64,16,9,-7,-21,127, 
  /* [35][0][][] */ -46,54,-81,25,-14,-26,40,-124,101,104,-92,-4,-2,-17,76,-127, 
  /* [36][0][][] */ -44,36,16,127,54,14,123,42,-30,28,-26,-29,-19,18,-96,-43, 
  /* [37][0][][] */ -1,-6,18,-71,9,-6,-42,-44,-89,-21,9,-18,-4,-127,53,-29, 
  /* [38][0][][] */ 42,86,-5,-50,127,4,25,-32,106,68,-16,0,12,-23,48,14, 
  /* [39][0][][] */ -28,56,-11,-127,-19,14,-37,25,49,-63,-23,-13,10,68,49,29, 
  /* [40][0][][] */ 14,-27,23,-68,8,-23,-5,-30,-127,-5,-28,-34,4,-105,61,-68, 
  /* [41][0][][] */ -14,-17,-43,-7,12,-39,21,-1,-27,6,-50,-15,-127,11,19,30, 
  /* [42][0][][] */ 127,77,-34,-14,-84,-48,-12,-60,13,30,79,-45,-59,51,99,-114, 
  /* [43][0][][] */ -7,106,-80,-10,52,-11,127,-56,70,108,-51,11,32,-124,-67,-61, 
  /* [44][0][][] */ -16,-16,3,-28,48,0,-80,-127,-8,-2,4,11,4,-33,62,-66, 
  /* [45][0][][] */ -10,36,-127,-48,14,-56,24,-78,15,39,5,-61,26,-26,64,-20, 
  /* [46][0][][] */ 10,-6,-22,-86,-16,13,24,-33,-113,-18,6,18,-10,-127,63,-34, 
  /* [47][0][][] */ 21,46,26,-16,127,-16,-22,14,-58,36,-1,17,6,-1,105,-27, 
  /* [48][0][][] */ -127,-71,-16,29,70,17,4,-12,-8,-25,-102,39,62,12,84,54, 
  /* [49][0][][] */ 13,23,107,88,127,9,39,38,-114,-38,-28,-66,15,117,29,-68, 
  /* [50][0][][] */ 36,-24,-100,-25,30,-127,-54,-18,-30,-22,-5,-37,46,-11,-1,12, 
  /* [51][0][][] */ 12,31,43,21,35,-7,4,29,-127,51,-2,-127,16,-110,-37,82, 
  /* [52][0][][] */ 1,46,7,43,50,5,16,39,58,76,-21,-48,39,127,57,27, 
  /* [53][0][][] */ -10,-47,-24,-7,-87,-16,-77,5,56,17,14,-63,24,-127,113,15, 
  /* [54][0][][] */ 61,-13,-38,1,120,94,-127,-53,-81,2,-34,-69,4,-52,-8,-41, 
  /* [55][0][][] */ 47,-9,8,-2,44,-39,-76,-127,-43,-79,-57,15,-8,-25,27,-1, 
  /* [56][0][][] */ -20,17,21,-18,-5,-31,-98,74,-9,127,-5,-19,26,5,-4,7, 
  /* [57][0][][] */ -6,15,-51,-18,-57,-51,127,77,-19,30,-12,-5,22,17,112,-10, 
  /* [58][0][][] */ 49,31,-127,38,89,97,-30,43,-100,-21,-5,15,-38,22,2,-25, 
  /* [59][0][][] */ -100,66,112,19,-69,-64,117,127,14,0,31,-23,13,12,64,3, 
  /* [60][0][][] */ 0,-6,-49,4,17,-127,-16,3,-3,-12,-8,-30,22,-18,-5,2, 
  /* [61][0][][] */ 20,-8,24,127,74,25,28,2,-98,4,18,48,-9,20,41,-50, 
  /* [62][0][][] */ -50,127,12,-38,-30,-16,-67,65,-15,-63,-88,-62,-11,-91,-59,-41, 
  /* [63][0][][] */ -40,23,-32,127,-83,7,-63,-38,-54,-22,-29,-36,27,60,35,35, 
  /* [64][0][][] */ 13,0,6,38,5,13,-15,64,22,4,-20,-40,-6,-127,45,-4, 
  /* [65][0][][] */ -16,-33,2,-127,35,-36,67,-42,-5,56,14,-100,-23,-6,26,-48, 
  /* [66][0][][] */ 34,-16,82,-35,12,13,-22,108,-5,-83,56,46,1,127,36,76, 
  /* [67][0][][] */ 3,48,-10,-127,-13,3,-59,25,77,-87,-28,0,34,80,75,31, 
  /* [68][0][][] */ -25,32,127,7,7,9,-5,1,-37,-11,-22,-28,20,-13,82,-34, 
  /* [69][0][][] */ 127,77,-24,4,-98,-41,-21,-48,14,27,88,-52,-67,54,65,-105, 
  /* [70][0][][] */ 37,7,-62,-7,-34,24,62,127,-28,98,-41,8,11,60,-28,18, 
  /* [71][0][][] */ 13,-8,-2,11,8,-85,-2,29,-39,12,-90,-1,-127,2,36,51, 
  /* [72][0][][] */ 14,15,-127,12,16,12,25,102,-51,-35,3,-12,23,22,-7,5, 
  /* [73][0][][] */ -45,17,40,9,51,-34,-73,-127,21,-67,35,-17,10,-48,32,-20, 
  /* [74][0][][] */ -1,34,39,127,22,-12,-86,91,-74,9,-48,37,14,-119,36,-89, 
  /* [75][0][][] */ -18,25,-53,22,23,-16,21,-8,115,14,-14,-14,5,127,-55,5, 
  /* [76][0][][] */ 4,-9,2,16,7,-11,-16,67,11,-35,-19,-127,1,-4,5,13, 
  /* [77][0][][] */ -15,19,-23,127,-45,10,81,92,14,25,-17,23,-23,-23,-21,-6, 
  /* [78][0][][] */ -1,5,20,-111,58,-49,-31,59,25,-74,2,-54,19,127,7,49, 
  /* [79][0][][] */ -7,-91,-69,-63,-80,-2,17,-86,127,16,34,61,19,36,43,-50, 
  /* [80][0][][] */ -50,-11,104,-85,9,-50,29,-110,-52,55,-52,-127,14,90,78,-48, 
  /* [81][0][][] */ -48,44,-125,29,75,-127,-15,60,-10,-50,59,-8,22,1,3,-3, 
  /* [82][0][][] */ 127,-2,-7,8,10,-106,-23,9,-23,-6,-94,3,109,1,2,29, 
  /* [83][0][][] */ -32,71,-120,-77,-40,-15,52,-127,73,58,-51,-114,17,51,43,96, 
  /* [84][0][][] */ -35,34,91,-49,18,-25,61,-127,-64,43,-5,-79,45,69,69,5, 
  /* [85][0][][] */ -82,127,33,-117,-68,-33,-28,3,-61,-8,-70,15,3,-10,-103,-28, 
  /* [86][0][][] */ -9,8,-35,4,-32,-30,127,18,5,-21,-2,15,8,24,79,-21, 
  /* [87][0][][] */ -22,-41,6,-127,5,-31,50,-20,-9,23,-11,-123,-14,0,16,-41, 
  /* [88][0][][] */ 89,-43,32,1,24,-122,8,41,-35,25,-127,-63,32,35,58,-8, 
  /* [89][0][][] */ 23,-22,-41,-56,31,-14,-30,-2,-56,-1,39,-76,127,-1,26,-42, 
  /* [90][0][][] */ 2,-52,39,-56,64,-8,-62,78,56,-78,-38,-23,-12,109,13,-127, 
  /* [91][0][][] */ -42,-16,-33,-40,14,-15,-21,-103,13,70,-14,-127,-39,-4,-2,10, 
  /* [92][0][][] */ -20,22,38,14,-4,-127,14,-2,1,-19,-1,-10,6,-26,23,2, 
  /* [93][0][][] */ 47,-15,127,-8,-50,53,33,-25,-19,29,-76,-20,-16,-1,30,0, 
  /* [94][0][][] */ 29,6,-9,-27,20,-2,-20,-4,-29,-15,12,-50,127,-16,35,-32, 
  /* [95][0][][] */ 127,91,-7,35,-101,-16,-62,-9,-22,-17,85,-39,-40,21,80,-81, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00068008247762918472, 0.0010778502328321338, 0.00096572883194312453, 0.00085586507339030504, 0.0010488415136933327, 0.00091373117174953222, 0.00039974300307221711, 0.00096618972020223737, 0.00053871999261900783, 0.0011192390229552984, 0.00049082632176578045, 0.00075567275052890182, 0.00070976832648739219, 0.0033392158802598715, 0.00062890368280932307, 0.00053663266589865088, 0.00029832191648893058, 0.00066439108923077583, 0.0010681470157578588, 0.00076183356577530503, 0.00036639341851696372, 0.00026064299163408577, 0.0004305829934310168, 0.00031563642551191151, 0.000459229078842327, 0.0016209640307351947, 0.0016639422392472625, 0.00085707718972116709, 0.00055116415023803711, 0.0011293351417407393, 0.0006253519095480442, 0.00068103882949799299, 0.00052686326671391726, 0.00077254482312127948, 0.00081644731108099222, 0.00057152757653966546, 0.00047569518210366368, 0.0005460873362608254, 0.0009507517097517848, 0.0010893263388425112, 0.00043352216016501188, 0.0013750526122748852, 0.00073212827555835247, 0.00050713756354525685, 0.0013291288632899523, 0.00059738656273111701, 0.00065912189893424511, 0.00077834317926317453, 0.00075414881575852633, 0.00056874158326536417, 0.00062286254251375794, 0.00044569326564669609, 0.0013060086639598012, 0.00076737656490877271, 0.00090689875651150942, 0.00098454928956925869, 0.0012118645245209336, 0.0009692054009065032, 0.00098057813011109829, 0.0004766422207467258, 0.0022929285187274218, 0.0011428950820118189, 0.00056532269809395075, 0.0012082600733265281, 0.0014559143455699086, 0.00067074468825012445, 0.0002503899740986526, 0.00061968259979039431, 0.001320582814514637, 0.00093616254162043333, 0.00070980802411213517, 0.00063842290546745062, 0.0023592908401042223, 0.0010458109900355339, 0.00064209196716547012, 0.00050742743769660592, 0.00068572378950193524, 0.00032750185346230865, 0.00029821309726685286, 0.00049392762593924999, 0.00044237106340005994, 0.00049360073171555996, 0.00047014062874950469, 0.00047304993495345116, 0.00030218568281270564, 0.00071488646790385246, 0.0016274318331852555, 0.000481424416648224, 0.00029983784770593047, 0.0015424846205860376, 0.00064950610976666212, 0.0006285381386987865, 0.00078414002200588584, 0.0014214643742889166, 0.0011816421756520867, 0.00051046168664470315, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -9582, 14603, -20786, -516, -12513, 6947, 28802, -53890, -4925, 13363, 27357, 15010, -12691, 14297, -8014, 12524, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00092861248413100839, 0.00041737273568287492, 0.00019179473747499287, 0.00023842597147449851, 0.00039295945316553116, 0.00042882072739303112, 0.00035976173239760101, 0.0002677708980627358, 0.00029849063139408827, 0.00027970774681307375, 0.00070456071989610791, 0.00059599993983283639, 0.00045860046520829201, 0.00023680897720623761, 0.0005348878912627697, 0.00048784492537379265, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -22,-12,0,-28,21,0,-41,0,12,7,-7,2,0,-6,-29,0,2,7,-1,-4,7,-33,1,5,7,14,0,127,32,-31,35,-8,-2,7,5,0,-8,10,-36,-1,-8,10,2,39,11,9,11,3,28,3,-7,11,12,-23,-15,80,2,3,-33,-33,-5,19,4,-20,-43,-59,-15,39,10,7,12,-11,-8,-28,-7,-16,-28,21,-3,6,-2,-22,26,20,2,-15,-6,-84,5,-9,7,-6,42,-35,-35,-8, 
  /* [1][0][][] */ 26,-68,-63,-58,127,-6,60,41,-27,-74,-51,-22,15,1,-65,29,-68,2,47,37,12,29,-17,-47,16,-2,-18,-58,39,-10,-66,39,-18,32,10,-1,4,-14,0,25,-31,36,-41,-11,-30,76,4,6,28,-71,8,-35,-24,30,48,18,-56,-27,-34,-37,29,-21,10,-43,-83,92,-28,-17,1,-21,-24,17,45,-93,-31,6,33,-40,34,3,16,-27,29,3,-42,22,-9,23,33,-35,-3,8,26,3,26,97, 
  /* [2][0][][] */ 7,60,-102,-4,99,80,27,70,0,-102,-7,-6,-8,-2,29,28,3,-10,-50,77,25,2,69,31,50,27,1,-42,34,-20,52,-65,26,44,-32,49,-127,-80,42,25,4,-49,10,-29,17,-27,6,75,-25,10,-23,-19,96,1,-15,57,23,16,23,12,19,18,42,-20,16,1,-37,1,-35,-6,-16,-40,-38,-89,18,57,85,42,31,-15,33,-51,0,-6,-43,30,9,47,-32,33,9,-23,0,-30,-62,-7, 
  /* [3][0][][] */ 73,12,95,-7,41,-40,20,-20,-13,-68,9,-36,-14,28,39,111,18,-7,23,10,127,-4,52,6,51,-28,-13,8,25,37,-11,83,-100,28,22,-16,-19,-15,-9,42,-79,-34,67,6,18,50,-43,-91,-67,-38,-53,40,9,-120,10,16,-102,74,69,33,8,107,-22,-46,43,73,-15,-54,20,-28,8,-68,53,-38,67,-33,10,-11,59,36,-41,-78,13,-11,-37,29,18,38,18,6,22,42,43,112,49,-43, 
  /* [4][0][][] */ 31,-2,13,-3,127,35,-2,-22,-38,-43,-35,-27,-46,26,-9,56,25,-72,-36,75,-11,11,23,-18,5,-4,17,-35,11,-19,52,-39,81,13,-25,18,37,13,15,10,-28,-7,-23,-29,0,-42,-9,8,38,2,-17,2,-3,-27,17,-27,20,-8,-32,31,1,49,63,27,37,46,-17,2,-36,-4,36,55,17,-70,-37,-25,37,27,73,-28,-4,-31,-2,-5,-60,10,40,51,-53,35,-3,-44,10,17,19,-25, 
  /* [5][0][][] */ 2,-11,-21,18,36,-9,39,-30,-20,-33,-14,8,3,33,0,7,-5,-3,18,-6,36,10,-46,70,14,1,17,-87,-5,20,9,22,-12,7,5,-51,32,23,-1,9,-6,-2,27,-24,0,-7,8,-18,-13,-20,13,-19,-10,-26,-13,-42,-9,16,-31,18,67,8,6,40,-11,55,10,80,18,80,4,33,10,8,-11,65,-20,-17,9,13,-1,-5,-6,18,-3,5,-10,127,-8,34,-6,-20,2,11,-55,14, 
  /* [6][0][][] */ 19,-76,22,-43,-32,12,41,27,1,-2,-12,-80,-29,-2,-33,27,25,-8,0,-10,-44,32,14,20,-31,-2,-25,-7,-15,22,36,-4,70,8,56,-12,-10,-15,11,-96,-17,87,8,-29,12,-30,-16,21,-16,44,-31,76,-30,-72,-15,-3,6,-67,-8,-2,-13,62,37,-83,33,-33,5,-19,-5,2,127,8,-44,13,-44,28,-93,-6,11,10,34,48,26,-7,-22,-11,39,19,14,15,52,-38,-17,-13,-34,-13, 
  /* [7][0][][] */ 15,127,54,13,115,39,44,-38,-22,-36,34,-10,-38,23,28,38,6,-46,-2,36,35,-24,50,6,-11,5,18,1,17,-23,12,22,53,-11,-53,-3,22,16,-8,81,-52,26,15,12,-22,-18,31,-21,-39,-36,31,7,33,-35,-27,41,51,8,-11,0,-18,-37,-14,-12,-47,81,-45,-93,-19,-30,3,57,-11,-34,23,2,63,57,52,-17,-58,-43,-13,-7,-25,68,-14,-11,-36,22,-34,-28,-46,-8,29,-11, 
  /* [8][0][][] */ -12,6,58,16,-127,-17,53,-16,25,94,77,9,-1,13,24,-1,-43,11,18,-3,-41,-9,-124,83,12,-33,58,-9,10,19,-2,58,77,-24,0,-1,-26,-23,3,39,16,-36,52,18,-39,-12,51,6,-108,22,31,33,-75,-50,-45,54,22,-62,-104,-24,24,-40,-27,-6,-1,79,3,-63,21,-15,-51,-20,37,61,55,-4,-27,-38,-26,34,-81,11,-16,-3,35,14,75,49,34,-31,49,44,-2,-14,42,22, 
  /* [9][0][][] */ 10,-95,-19,24,95,85,-30,-32,21,-35,103,85,-14,17,81,-103,28,-31,-2,10,-60,-50,34,-3,-26,14,-9,33,-20,6,9,-12,16,21,-107,29,-5,7,-21,65,28,-77,-24,66,7,-11,-73,-28,34,26,-19,-91,66,24,-11,-43,-4,72,-16,7,27,-59,-27,127,-88,-15,-7,-22,1,25,-59,-80,40,-10,2,29,67,-63,18,0,-2,-19,2,33,2,-64,30,-4,2,-35,-56,36,-60,-5,-13,-50, 
  /* [10][0][][] */ -55,-25,-39,-39,-22,-2,64,-25,41,24,29,35,32,-7,-6,-10,-7,26,-26,-20,-6,24,11,17,-6,-3,17,-127,23,-43,59,-39,-4,26,-2,-1,-3,31,3,-11,17,-26,22,-51,15,-11,23,13,-1,38,-30,-20,-44,-30,-10,-52,13,17,-14,-40,25,5,5,9,-43,91,-6,-26,24,-37,-6,-14,-34,-9,15,62,-7,36,-29,11,-15,1,7,28,13,-27,-7,127,-2,3,14,3,21,-47,49,-33, 
  /* [11][0][][] */ -84,18,-4,0,22,-57,-15,-3,-47,-6,-2,18,33,24,-22,-9,46,1,-61,-43,23,-13,-10,6,65,10,60,0,-19,23,-34,11,-11,23,-15,-6,-7,5,23,2,-15,-7,3,7,82,11,73,22,53,37,-3,28,5,-62,14,-3,-65,-20,-43,-42,-5,-11,3,25,-7,-24,32,1,23,4,-7,37,-21,10,22,-1,-18,71,-127,66,-32,-4,-64,-66,120,12,38,-2,10,47,-28,-60,-24,39,-23,-1, 
  /* [12][0][][] */ -1,-4,-40,4,67,18,0,-18,-17,22,20,1,3,-11,32,-5,-33,-12,11,-12,1,-14,-37,39,-16,42,-17,88,-14,25,-31,0,-15,29,6,28,-22,-17,18,8,-4,-16,-3,1,-15,3,24,23,-4,-9,4,-34,-13,16,-8,-18,-8,-9,13,26,-13,-20,0,49,37,-71,9,53,-24,-127,-2,48,9,4,17,83,15,-18,-1,1,-1,24,-41,2,9,-10,1,-43,-9,16,5,0,-40,40,-10,18, 
  /* [13][0][][] */ -85,59,0,-8,-68,7,-11,22,-37,-23,51,21,87,11,-20,-1,-16,33,-47,-7,23,-15,58,-53,60,35,2,-1,3,-26,-34,-99,-92,-33,1,2,-5,28,36,-24,-30,84,-4,17,46,3,-21,4,71,-13,30,79,63,-63,84,-14,-26,64,43,6,13,37,-19,17,11,-24,-5,10,8,20,24,-127,11,-22,-92,11,47,45,-47,-55,87,-18,4,-29,34,-41,94,6,-24,-4,-10,23,37,-44,-14,9, 
  /* [14][0][][] */ -38,17,-7,-52,36,5,-12,35,-88,6,18,9,-16,-56,-81,-30,-83,-16,71,10,33,-7,17,-97,-35,17,-56,-12,20,-10,-10,-27,-59,-27,31,13,-17,-4,1,4,5,79,-70,-4,-49,17,7,15,127,-20,29,-4,24,47,-103,26,-22,22,-95,5,9,32,44,24,5,23,-3,9,-48,26,54,35,30,1,-20,28,46,-63,-33,-93,21,-31,18,35,33,-73,-40,8,-31,25,31,50,15,30,19,-6, 
  /* [15][0][][] */ -31,-74,-4,-33,0,2,-6,-67,-18,12,-7,-25,32,-19,47,-7,-89,-5,-24,16,-23,10,-64,-43,-13,-6,-1,12,-24,-21,60,-94,-5,24,15,3,-4,26,-92,-1,29,-70,-4,20,-33,-38,51,26,41,13,-10,-127,0,51,5,31,37,-9,-13,43,0,2,35,-8,5,-2,-15,-12,-32,27,13,31,-34,-1,1,-33,-25,-14,12,6,-13,34,-12,70,-20,-36,-38,-40,-48,51,33,82,-35,0,6,-19, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.039466030895709991, 0.017738340422511101, 0.0081512760370969772, 0.010133103467524052, 0.016700776293873787, 0.01822488009929657, 0.015289872884750366, 0.011380262672901154, 0.012685852125287056, 0.011887579225003719, 0.029943829402327538, 0.025329997763037682, 0.019490519538521767, 0.010064381174743176, 0.022732734680175781, 0.020733408629894257, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 18256, 64172, -200, 85, 15302, -4897, -203, 267, 5385, 16678, -4534, 258, 549, 3702, 4874, -8947, -4068, -366, -238, 14068, -9668, 15046, -2333, 8751, 17577, -57, -5063, 17160, 14371, -18986, 1650, 22051, 24022, -9578, 2661, 236, -535, -348, 4107, -8031, -5469, -1411, -9382, 73, 29720, -1485, 13312, -1398, -15070, 2351, -14, 562, -2643, 16131, -4053, 14043, 22604, -114, 36665, 105, -9590, -436, 1451, 147, -1349, 13239, -1406, -8871, -2853, 3379, -9, -3408, 1351, -39, -2447, -5229, 47, -1950, 40291, -7480, -5425, -12372, -25, 806, 60860, -13821, -11778, -27545, -7669, 8707, -2238, 32306, 103, -2110, -4074, 1138, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012722628889605403, 8.8990047515835613e-05, 0.00010553709580563009, 0.00020143025903962553, 0.00021525078045669943, 0.00017498384113423526, 5.7825905969366431e-05, 8.6496387666556984e-05, 0.00022906227968633175, 0.00014409617870114744, 0.00025870231911540031, 0.00012231786968186498, 0.00024469746858812869, 0.00020285214122850448, 0.00038076270720921457, 0.00016164057888090611, 0.00020806842076126486, 0.00017414362810086459, 0.00019052898278459907, 7.5661395385395736e-05, 9.428063640370965e-05, 4.5765929826302454e-05, 0.00013970724830869585, 8.4420978964772075e-05, 7.0680696808267385e-05, 8.4362698544282466e-05, 0.00017820217180997133, 0.00018311655730940402, 7.4247007432859391e-05, 0.00046411275980062783, 0.00036736929905600846, 0.00024842016864567995, 0.00012606648670043796, 0.00017454633780289441, 0.00021454616216942668, 0.00042556674452498555, 0.00036236800951883197, 0.00021349877351894975, 0.00021941924933344126, 9.4442759291268885e-05, 0.00022067222744226456, 0.00018215189629700035, 0.0003283040423411876, 9.824454173212871e-05, 0.00034763227449730039, 8.9001769083552063e-05, 0.00011243701737839729, 0.00029060381348244846, 0.000650534697342664, 0.00010001171904150397, 0.00042330854921601713, 0.00015008384070824832, 0.00017813277372624725, 0.00017375257448293269, 0.00022227597946766764, 0.00012591887207236141, 0.00011909769818885252, 0.00040510727558284998, 4.749085201183334e-05, 0.00018886268662754446, 0.00028447690419852734, 0.00034233843325637281, 0.00011498948151711375, 0.00016797032731119543, 0.00012515897105913609, 0.00013807715731672943, 0.00026221381267532706, 0.00024484453024342656, 0.00019802407769020647, 0.00011093015200458467, 0.00021510326769202948, 0.00010563591058598831, 0.00027749562286771834, 0.00014698477752972394, 0.00029393538716249168, 0.00036656163865700364, 0.00011088311293860897, 7.8064214903861284e-05, 6.306332943495363e-05, 0.0001670181518420577, 0.00029326742514967918, 0.00022069107217248529, 0.00018956905114464462, 0.00031738751567900181, 5.833532486576587e-05, 0.00010384275083197281, 8.0988429544959217e-05, 0.0004961777594871819, 0.00024188742099795491, 0.00012403570872265846, 0.00037511013215407729, 3.6425954021979123e-05, 0.00014703435590490699, 9.5347313617821783e-05, 0.00027357591898180544, 0.00028931506676599383, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-11,127,22,72,78,-60,-14,-17,-14,-6,-29,3,37,1,-9,-44,27,22,19,-127,127,7,-84,7,50,-29,-127,-127,40,25,13,26,59,-19,-30,-10,31,-7,-13,28,-107,71,26,-70,36,47,-18,51,-24,19,4,-6,17,48,-91,-49,-63,-20,-11,0,11,38,69,-25,75,13,-9,16,19,127,23,24,25,-2,-10,17,127,-6,-15,16,-27,19,125,20,-73,-17,-1,-30,-15,-39,1,-24,-15,26, 127,-127,73,106,-42,127,41,-120,70,5,-17,127,127,-97,-13,16,10,127,127,-111,127,-76,81,69,-127,-116,-67,-35,-56,46,-59,-20,-88,53,-127,-85,-43,-14,-52,61,0,127,127,82,-51,-115,-113,-50,-16,-127,43,84,65,-32,46,84,-47,43,-80,-113,-44,-41,-61,67,73,-62,26,28,-82,33,-18,90,118,127,13,18,2,59,-32,53,65,127,127,-23,-9,75,-109,127,-120,-100,5,-127,-90,-127,-38,105, -74,-13,28,-84,15,-27,62,-9,81,-34,-27,17,-19,-3,-9,-13,-10,-15,7,-3,-21,-104,30,-1,-121,95,7,-55,117,49,-14,10,0,14,13,-30,-9,34,19,12,25,12,-119,63,18,-18,36,14,-14,11,-16,4,-9,1,-3,21,-66,7,-35,52,3,41,33,-1,-7,-39,-31,23,9,2,-4,36,9,-25,-6,3,-11,-7,-83,2,-21,-23,-18,2,-111,9,-31,-23,-49,26,-25,-34,29,-26,-14,1, 
  /* [0][1][][] */ -64,-76,71,-37,-47,93,19,127,-52,-21,0,-120,26,-115,79,31,-3,-61,-16,89,54,-69,47,49,-93,-13,127,-23,-25,63,122,-104,-127,89,-86,-57,-36,32,-28,94,-49,-26,-4,45,-47,127,-23,66,16,95,20,-2,16,-55,28,32,127,122,-74,-86,127,-34,-35,127,71,-38,-15,0,127,38,127,97,-41,101,-5,13,14,12,-30,9,-44,124,-79,108,1,34,-53,30,79,-127,-32,-8,127,-68,-23,0, 66,124,55,-116,127,84,90,38,-127,127,127,-39,-64,-127,-127,127,127,-63,-124,-49,103,93,-121,127,-105,-91,-45,127,-127,108,-127,-127,-88,127,105,127,127,-127,-106,127,-65,-96,110,-127,-127,-37,-127,-127,127,-112,86,42,127,127,127,-127,101,-127,-127,127,20,-80,-127,-101,-127,127,-127,127,-126,-127,-107,-82,-127,-78,127,127,-127,127,-76,127,127,29,-42,-127,60,127,92,46,127,14,127,1,-67,36,127,-127, -53,-14,-51,38,-56,-100,35,-27,19,-33,-28,95,1,94,14,10,-5,64,-6,127,2,-84,-40,5,-73,103,-72,-20,-69,-17,16,-63,-70,38,5,-18,-29,45,-68,40,127,-4,-39,28,-40,-60,15,45,9,118,-11,6,-35,-73,4,19,96,3,-2,20,-36,127,91,-52,-43,12,38,-10,-78,122,-19,-86,-1,-53,-16,-20,26,15,76,-37,-70,-41,56,14,-48,-17,72,23,16,65,-43,17,-42,98,-27,-5, 
  /* [0][2][][] */ -67,0,-5,-21,13,-45,68,24,55,-29,-36,-3,18,20,-26,2,-7,64,7,2,-56,-80,3,-9,-25,-54,35,-69,89,38,25,26,16,-10,-12,-47,-7,35,-3,-2,-15,-6,-67,103,3,31,11,37,-15,-32,10,-20,22,0,10,14,-70,24,-17,14,15,-1,-20,-4,0,-47,-46,16,-33,12,25,29,13,-18,26,5,17,4,-77,-13,-9,-7,17,14,-127,8,14,-44,-57,-50,-28,-48,9,58,-19,-9, 120,33,-127,-36,-71,-25,40,29,-64,-29,-19,-110,-77,114,-12,37,3,-51,-9,-124,90,-49,-37,0,-105,127,-51,20,-34,-22,-9,-4,-63,15,26,5,-23,-29,127,53,11,-14,67,-35,-39,77,-67,-43,-33,-7,-127,-127,-49,-26,1,39,-65,-7,9,37,-8,-18,8,-47,-53,33,64,-21,115,109,-24,-70,11,-56,4,4,100,4,52,21,11,-95,-49,2,3,9,127,40,-60,41,-19,-111,40,80,-10,25, -54,12,-19,26,16,-70,-127,1,-11,-8,-15,5,15,-25,20,-2,-8,-17,5,18,-50,-68,14,1,19,-94,20,3,-48,-40,-7,16,41,-20,-7,-26,-36,2,41,-39,23,-2,-49,-34,3,65,22,17,-9,-5,10,-9,19,5,-3,-5,-62,-12,0,-40,-12,10,83,-10,35,-2,-2,28,0,5,-4,20,-18,16,0,15,36,0,75,-13,3,-7,-8,-17,74,2,44,-39,59,41,-17,-55,-7,3,-15,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0054071173071861267, 0.0037820769939571619, 0.0044853263534605503, 0.0085607860237360001, 0.0091481581330299377, 0.0074368128553032875, 0.0024576010182499886, 0.0036760964430868626, 0.0097351465374231339, 0.0061240876093506813, 0.010994847863912582, 0.0051985094323754311, 0.010399642400443554, 0.0086212158203125, 0.016182415187358856, 0.0068697244860231876, 0.0088429078459739685, 0.0074011040851473808, 0.0080974819138646126, 0.0032156091183423996, 0.0040069269016385078, 0.0019450519466772676, 0.0059375576674938202, 0.0035878915805369616, 0.0030039295088499784, 0.003585414495319128, 0.0075735920108854771, 0.0077824536710977554, 0.0031554978340864182, 0.019724791869521141, 0.015613195486366749, 0.010557857342064381, 0.0053578256629407406, 0.0074182194657623768, 0.009118211455643177, 0.018086586147546768, 0.015400640666484833, 0.0090736979618668556, 0.0093253180384635925, 0.0040138172917068005, 0.0093785692006349564, 0.0077414554543793201, 0.013952921144664288, 0.0041753929108381271, 0.014774370938539505, 0.0037825750187039375, 0.004778573289513588, 0.012350661680102348, 0.027647724375128746, 0.0042504980228841305, 0.017990613356232643, 0.0063785631209611893, 0.0075706425122916698, 0.0073844841681420803, 0.0094467289745807648, 0.0053515518084168434, 0.0050616520456969738, 0.017217058688402176, 0.0020183611195534468, 0.0080266641452908516, 0.012090268544852734, 0.014549382962286472, 0.0048870528116822243, 0.0071387388743460178, 0.0053192558698356152, 0.0058682789094746113, 0.011144086718559265, 0.010405892506241798, 0.0084160231053829193, 0.0047145313583314419, 0.0091418884694576263, 0.0044895261526107788, 0.011793563142418861, 0.0062468526884913445, 0.012492253445088863, 0.015578868798911572, 0.0047125322744250298, 0.0033177291043102741, 0.0026801913045346737, 0.0070982715114951134, 0.012463865801692009, 0.0093793701380491257, 0.0080566843971610069, 0.013488968834280968, 0.0024792512413114309, 0.0044133169576525688, 0.0034420080482959747, 0.021087553352117538, 0.010280215181410313, 0.0052715176716446877, 0.015942180529236794, 0.0015481030568480492, 0.0062489602714776993, 0.0040522608906030655, 0.011626976542174816, 0.012295890599489212, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2459, 8136, 14010, 28541, 14577, -4136, -1666, 5992, 30420, -4287, 12338, 5762, 9596, 13254, 35477, 1380, 3040, 8820, 14424, 6014, -301, 452, 11148, -1103, 4934, 135, 11997, 8146, 6943, 40951, 57309, 19483, 8435, -754, 12069, 3517, 1629, 3776, 24461, -1149, 12845, 8226, 31100, -3837, 28330, 12565, 7214, 19523, 61722, 10459, -598, 8450, -4919, -276, -2569, 7191, -535, 17358, 6039, 13076, 6227, 16873, 7679, 6536, 8769, 14554, 5571, -6616, 8804, -3867, 5071, 10665, 21339, 5896, -5407, -5153, 7125, 503, 2937, -1353, 19972, 10863, 8354, 17208, 3748, 301, 13057, 68420, 15182, 13554, 7114, -233, 6131, 8482, 5323, 14972, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00016678491374477744, 0.00017946242587640882, 0.00013545977708417922, 8.0781916039995849e-05, 0.00020374759333208203, 0.00024199325707741082, 0.00048098826664499938, 0.00027444603620097041, 7.6557524153031409e-05, 0.00032755584106780589, 0.00021655099408235401, 0.00015585579967591912, 0.00013345314073376358, 0.00017279628082178533, 6.6877815697807819e-05, 0.00041190901538357139, 0.00014781835488975048, 0.00014084973372519016, 0.000153399130795151, 0.00019786754273809493, 0.00027095270343124866, 0.00050111208111047745, 0.00017970376939047128, 0.00059081538347527385, 0.00052716641221195459, 0.00019342401355970651, 0.00018544759950600564, 0.00017494669009465724, 0.00023651336960028857, 8.6367152107413858e-05, 4.9662023229757324e-05, 0.00012709035945590585, 0.00019619439262896776, 0.00029651203658431768, 0.00016679258260410279, 0.00016812361718621105, 0.00032039682264439762, 0.00038809701800346375, 0.00011141816503368318, 0.00050297053530812263, 0.00014640022709500045, 0.00019250958575867116, 8.6637446656823158e-05, 0.00027981991297565401, 0.00011486259609228, 0.00012450582289602607, 0.00024254138406831771, 0.00013764627510681748, 6.69513174216263e-05, 0.00020054243213962764, 0.00022064746008254588, 0.00020333654538262635, 0.00021873744844924659, 0.00016428231901954859, 0.00040977369644679129, 0.00015181631897576153, 0.0002018824452534318, 0.00010714247036958113, 0.00033972878009080887, 0.00011254848504904658, 0.00025776619440875947, 8.4168445027898997e-05, 0.00019300705753266811, 0.00015273211465682834, 0.00028040655888617039, 0.0001330618979409337, 0.00023033762408886105, 0.00020305486395955086, 0.00019195876666344702, 0.00018464501772541553, 0.0002206318749813363, 0.00014921583351679146, 9.8212156444787979e-05, 0.00017208969802595675, 0.00028979466878809035, 0.00026169308694079518, 0.00023010300355963409, 0.00024668319383636117, 0.00025498695322312415, 0.00029142506537027657, 0.00010203741112491116, 0.00015177267778199166, 0.00010638299863785505, 0.00011166433978360146, 0.00030638696625828743, 0.0002109718625433743, 0.00017834040045272559, 5.5972199334064499e-05, 9.2294321802910417e-05, 0.00016570698062423617, 0.00017941111582331359, 0.00029316771542653441, 0.00023676687851548195, 0.00018650862330105156, 0.00021476302936207503, 0.00011366442049620673, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 9,59,-27,85,33,25,6,-5,41,28,-72,120,17,-127,50,-126, 
  /* [1][0][][] */ 13,49,-10,-30,24,-18,127,-102,4,82,-8,-20,0,-53,36,14, 
  /* [2][0][][] */ -127,20,-50,-30,6,-30,44,94,-29,47,124,-35,-86,13,23,-58, 
  /* [3][0][][] */ -91,50,36,75,-39,59,84,119,5,73,-127,10,21,-82,-81,-51, 
  /* [4][0][][] */ 17,9,32,65,-26,67,1,46,1,-15,-2,2,29,-12,-127,-25, 
  /* [5][0][][] */ -1,-27,68,-12,15,-20,-11,23,-77,102,-39,-127,-9,33,-64,-36, 
  /* [6][0][][] */ 15,0,30,-16,35,52,-58,-77,-15,-4,54,-14,127,-21,-13,-29, 
  /* [7][0][][] */ 28,23,127,-6,-31,-49,5,-19,-77,38,-97,-41,20,-13,39,-26, 
  /* [8][0][][] */ 16,21,84,62,-46,89,15,56,30,-7,16,-91,-29,2,-127,-75, 
  /* [9][0][][] */ 38,-109,66,51,14,-24,-11,9,127,-3,90,10,-20,3,-100,-23, 
  /* [10][0][][] */ -35,-98,3,-31,-123,15,-29,53,126,127,47,-33,-31,69,106,8, 
  /* [11][0][][] */ 34,-22,3,-116,1,-34,-97,-127,-75,33,-1,-45,47,-33,43,-51, 
  /* [12][0][][] */ -5,18,10,-45,-42,-32,-102,-12,-51,-80,-26,24,29,127,76,38, 
  /* [13][0][][] */ -48,-127,-41,31,7,-49,-21,-10,44,-3,-13,-30,18,27,121,43, 
  /* [14][0][][] */ -8,-66,47,34,28,36,17,107,27,63,8,-36,10,42,-60,127, 
  /* [15][0][][] */ 25,-35,0,56,12,-8,90,2,0,-127,11,-34,8,-23,-5,-33, 
  /* [16][0][][] */ 55,-85,-48,27,13,8,32,-74,127,61,105,12,20,118,83,126, 
  /* [17][0][][] */ -91,-85,49,118,127,75,4,-34,110,-74,-13,-60,13,56,-114,42, 
  /* [18][0][][] */ -23,3,-9,9,-97,-10,-2,47,-79,-36,-10,-62,-11,-127,79,10, 
  /* [19][0][][] */ 39,-71,32,-78,73,42,-90,83,76,-60,83,24,-20,63,41,127, 
  /* [20][0][][] */ 36,-26,56,-53,-16,1,-25,52,-19,-52,85,-21,14,11,-41,127, 
  /* [21][0][][] */ -60,-17,7,-29,17,2,-87,-57,-18,60,-10,14,-127,-14,41,-19, 
  /* [22][0][][] */ 20,-21,25,-19,24,-77,5,-20,-127,29,-13,-40,-21,-6,77,-27, 
  /* [23][0][][] */ 9,8,15,-13,6,13,-10,0,-12,-9,52,-15,127,-8,5,-35, 
  /* [24][0][][] */ -13,-1,7,-54,-31,-16,48,8,-52,4,-8,-127,2,-95,33,6, 
  /* [25][0][][] */ -104,18,-67,-11,42,-43,-91,-127,-18,58,-30,-81,-100,-78,38,-39, 
  /* [26][0][][] */ 36,-20,51,-106,112,-22,-9,-2,127,-49,41,-24,-7,99,8,75, 
  /* [27][0][][] */ 95,-28,22,-34,-39,-53,-1,-25,-32,22,-127,10,15,-17,4,46, 
  /* [28][0][][] */ -92,-27,-127,-73,34,-24,59,-44,11,38,-71,18,51,-3,-35,45, 
  /* [29][0][][] */ -79,-43,3,127,3,27,20,-41,-23,-11,-74,46,16,-87,18,-35, 
  /* [30][0][][] */ 47,-22,127,-26,56,34,-29,72,-32,-81,54,-41,-17,18,-68,66, 
  /* [31][0][][] */ 12,-95,6,-51,5,-60,26,-37,-19,41,108,20,-25,98,63,127, 
  /* [32][0][][] */ -17,75,-37,39,-127,18,-64,-39,-51,-27,-1,43,5,46,28,57, 
  /* [33][0][][] */ 28,-16,18,127,14,2,26,-45,-108,50,59,-12,5,5,13,111, 
  /* [34][0][][] */ 40,1,18,6,74,-39,-127,-15,-38,101,-51,10,-21,11,-3,1, 
  /* [35][0][][] */ 91,8,-16,6,14,-127,-40,-13,-11,4,-98,6,73,25,8,18, 
  /* [36][0][][] */ 26,5,-127,9,42,13,-36,18,-28,-17,-3,-5,0,16,-23,6, 
  /* [37][0][][] */ -4,1,127,-9,-60,27,18,-55,-5,24,-53,16,25,-23,14,-1, 
  /* [38][0][][] */ -127,28,-11,30,28,88,-2,-33,10,-21,114,-19,-38,9,1,-17, 
  /* [39][0][][] */ -12,-9,14,30,27,-15,-127,39,9,25,-7,-34,-1,-19,-2,0, 
  /* [40][0][][] */ -3,86,-18,127,10,52,52,28,-67,-38,-23,63,22,39,-66,-33, 
  /* [41][0][][] */ 8,5,-45,-30,-42,-6,127,93,-55,71,-20,-11,-6,56,35,1, 
  /* [42][0][][] */ 26,-36,-35,-27,14,19,-51,34,75,-91,127,46,-10,30,-45,47, 
  /* [43][0][][] */ -76,-1,20,-31,31,9,-62,-66,-16,45,-3,-22,-127,-14,23,-5, 
  /* [44][0][][] */ 4,2,-7,-7,4,-17,-9,-53,127,-4,25,52,17,80,-1,39, 
  /* [45][0][][] */ -83,-94,31,-118,53,7,-20,48,11,-87,-12,-26,26,122,-51,127, 
  /* [46][0][][] */ -36,10,-36,106,-101,-37,-3,-70,-127,31,-61,-10,5,40,5,-43, 
  /* [47][0][][] */ -39,-8,-121,127,5,70,-18,-30,10,33,74,91,-29,-33,50,-22, 
  /* [48][0][][] */ -32,-1,32,-127,17,-34,-13,15,-57,6,17,-28,-8,53,92,43, 
  /* [49][0][][] */ -29,23,38,110,-6,45,-48,-24,12,-53,-80,-36,-44,-59,-90,-127, 
  /* [50][0][][] */ 0,61,25,-102,61,13,-26,45,127,-18,-35,6,4,-40,9,-37, 
  /* [51][0][][] */ 4,-37,19,-12,52,-17,-49,-127,10,-80,0,-8,-20,-9,-11,-6, 
  /* [52][0][][] */ 39,15,-18,33,25,-27,-72,119,-93,127,-62,-44,95,103,7,-45, 
  /* [53][0][][] */ -4,100,16,-101,-38,2,20,-30,-70,-58,-53,66,15,-127,-98,-13, 
  /* [54][0][][] */ 5,3,15,29,44,-28,5,-35,-8,23,-20,-19,-5,127,-40,-17, 
  /* [55][0][][] */ -127,125,84,-24,46,-3,-14,1,-43,29,108,-18,-23,-32,110,-18, 
  /* [56][0][][] */ 55,3,1,-126,79,-7,-5,39,61,-41,62,127,-42,5,97,59, 
  /* [57][0][][] */ -18,-2,10,57,-26,25,45,127,-10,0,7,-22,5,55,6,25, 
  /* [58][0][][] */ 7,127,-7,-109,15,40,1,9,107,3,6,80,-5,-83,46,56, 
  /* [59][0][][] */ 47,65,58,-127,-65,-12,22,2,6,22,32,-78,1,-121,-77,19, 
  /* [60][0][][] */ 47,-17,120,-52,-38,127,32,-44,-18,35,-53,-16,24,-4,39,3, 
  /* [61][0][][] */ -32,44,-56,-50,-58,3,127,118,-11,64,-6,15,-1,75,18,-47, 
  /* [62][0][][] */ -21,-9,-26,-11,-63,25,-50,-11,-22,-28,3,-45,5,-127,91,20, 
  /* [63][0][][] */ 1,-21,3,-98,43,-1,-120,-127,-71,109,-10,16,65,-7,16,-54, 
  /* [64][0][][] */ -24,-5,39,52,72,5,-31,-127,30,-92,-5,-31,2,-14,-11,3, 
  /* [65][0][][] */ -127,14,34,-71,24,80,40,-60,-88,29,46,-11,-1,13,-25,-33, 
  /* [66][0][][] */ 54,2,76,6,-49,19,-14,49,-57,-5,78,-89,-24,38,-127,-13, 
  /* [67][0][][] */ 50,-24,-73,83,51,-72,-87,-91,53,-127,-127,-22,-101,51,-75,43, 
  /* [68][0][][] */ 8,-39,-68,54,-60,-91,0,-61,-31,-10,38,-65,-24,52,127,-8, 
  /* [69][0][][] */ -40,51,-84,57,-15,-116,34,75,36,15,64,1,127,24,-5,1, 
  /* [70][0][][] */ 17,6,-33,-33,-41,14,127,100,-21,53,-28,17,20,48,20,-12, 
  /* [71][0][][] */ 17,-5,-26,-45,16,7,6,54,-35,-45,-15,4,20,-127,81,17, 
  /* [72][0][][] */ 22,32,-19,30,21,-48,-47,-127,14,49,-39,11,49,49,50,54, 
  /* [73][0][][] */ -47,-127,-24,-71,-74,-20,30,-23,-16,5,-26,-38,11,-50,53,-6, 
  /* [74][0][][] */ -27,30,52,94,-12,-3,-127,97,21,-37,-43,-42,-1,-11,-9,5, 
  /* [75][0][][] */ -41,36,-27,22,-17,92,71,127,-5,57,-14,-20,-97,81,5,4, 
  /* [76][0][][] */ 30,-37,-30,-14,55,-75,-127,-110,-9,-22,-3,-16,48,7,72,-26, 
  /* [77][0][][] */ -24,8,-39,-22,-42,1,-18,-43,127,2,-65,19,-1,53,31,-90, 
  /* [78][0][][] */ -101,-127,4,87,69,44,-30,30,0,-68,-100,51,44,-15,88,51, 
  /* [79][0][][] */ 40,-6,32,-66,127,2,56,22,84,24,3,34,3,-32,15,-39, 
  /* [80][0][][] */ -12,-43,77,-110,-18,-48,5,9,-88,-40,-11,-65,0,127,-43,12, 
  /* [81][0][][] */ 7,-20,30,39,16,50,-16,-23,11,-4,11,-30,-14,37,-127,13, 
  /* [82][0][][] */ -93,-34,19,-125,-9,-39,6,-37,-35,-44,-42,-127,-32,-99,-91,36, 
  /* [83][0][][] */ 1,15,-22,-63,-46,4,-9,30,-70,-7,7,-66,13,-127,11,40, 
  /* [84][0][][] */ 127,33,23,44,-58,3,-61,23,-5,-28,100,4,-66,25,74,-69, 
  /* [85][0][][] */ 4,-35,8,-27,35,-19,-41,118,-95,-114,-83,-36,-22,80,80,-127, 
  /* [86][0][][] */ 25,-6,8,-13,-54,62,-34,44,-98,-53,26,-27,-15,-127,-12,25, 
  /* [87][0][][] */ 127,-35,21,-11,-44,-38,10,0,1,14,-107,7,43,-6,-11,39, 
  /* [88][0][][] */ 51,99,-14,16,-22,-26,-35,-24,127,33,23,52,-13,-27,117,-117, 
  /* [89][0][][] */ 43,68,-73,-12,-38,-19,11,-68,50,45,14,-34,-39,-6,-33,-127, 
  /* [90][0][][] */ -6,-40,7,-73,-62,18,127,-59,81,-71,6,-85,31,-5,-28,-7, 
  /* [91][0][][] */ 22,4,-17,-106,-36,4,21,-37,-60,19,68,59,18,-15,42,127, 
  /* [92][0][][] */ 8,9,-4,9,55,-14,-61,-127,42,-52,-7,-23,-39,-28,0,-22, 
  /* [93][0][][] */ 86,-8,33,-118,-47,1,-16,63,52,-67,71,-28,-25,127,-23,39, 
  /* [94][0][][] */ -115,43,-93,24,73,-127,-19,8,-3,-45,99,-39,-14,-17,-21,-5, 
  /* [95][0][][] */ -31,50,13,-127,-7,-4,-22,6,14,-35,-47,-76,-11,23,-49,-1, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00059618992963805795, 0.00064150703838095069, 0.00048421500832773745, 0.00028876331634819508, 0.00072831689612939954, 0.00086502998601645231, 0.0017193424282595515, 0.00098103575874119997, 0.00027366279391571879, 0.0011708822567015886, 0.00077408395009115338, 0.00055712269386276603, 0.00047704207827337086, 0.00061767821898683906, 0.00023906167189124972, 0.0014724114444106817, 0.00052839203272014856, 0.00050348194781690836, 0.00054834107868373394, 0.00070729805156588554, 0.00096854852745309472, 0.0017912769690155983, 0.00064236973412334919, 0.0021119308657944202, 0.0018844108562916517, 0.00069141417043283582, 0.00066290167160332203, 0.00062536506447941065, 0.00084544153651222587, 0.0003087283403147012, 0.00017752204439602792, 0.00045429766760207713, 0.00070131715619936585, 0.0010599129600450397, 0.00059621734544634819, 0.00060097529785707593, 0.0011452916078269482, 0.0013872929848730564, 0.00039827576256357133, 0.0017979203257709742, 0.0005233227857388556, 0.00068814546102657914, 0.00030969452927820385, 0.0010002452181652188, 0.00041058825445361435, 0.00044505897676572204, 0.00086698931409046054, 0.00049203087110072374, 0.00023932442127261311, 0.00071685970760881901, 0.00078872719313949347, 0.00072684756014496088, 0.00078189966734498739, 0.00058724416885524988, 0.0014647785574197769, 0.00054268317762762308, 0.00072164973244071007, 0.00038299185689538717, 0.0012143957428634167, 0.00040231621824204922, 0.00092141196364536881, 0.00030086882179602981, 0.00068992370506748557, 0.00054595677647739649, 0.0010023423237726092, 0.00047564352280460298, 0.00082336569903418422, 0.00072584062581881881, 0.00068617647048085928, 0.00066003273241221905, 0.00078867148840799928, 0.00053338747238740325, 0.00035106952418573201, 0.00061515247216448188, 0.0010359010193496943, 0.00093544903211295605, 0.00082252704305574298, 0.00088179466547444463, 0.00091147725470364094, 0.0010417291196063161, 0.00036474328953772783, 0.00054252718109637499, 0.00038027705159038305, 0.00039915574598126113, 0.0010952119482681155, 0.00075414078310132027, 0.00063749623950570822, 0.00020007842977065593, 0.00032991560874506831, 0.00059233675710856915, 0.00064132362604141235, 0.0010479583870619535, 0.00084634771337732673, 0.00066669436637312174, 0.00076769269071519375, 0.00040630524745211005, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -2901, -1776, -10426, 32944, 24953, 5631, -6741, -5141, 30029, 2952, 28896, 23795, -10707, 11000, 33903, -28282, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00041986472206190228, 0.00027816032525151968, 0.00026363515644334257, 0.00020604894962161779, 0.00036263474612496793, 0.00035243461024947464, 0.00029448419809341431, 0.00038308952935039997, 0.00017960378318093717, 0.00024207147362176329, 0.00038174321525730193, 0.00064939784351736307, 0.00042605790076777339, 0.00046395623940043151, 0.00046946373186074197, 0.00038451049476861954, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 4,20,-8,20,51,61,-26,-22,50,1,8,11,-12,17,29,64,-2,-9,-13,-4,95,-58,10,-11,-21,-39,-35,-92,-6,-6,43,41,120,-8,12,-2,2,-17,-13,2,-28,13,24,-24,6,-26,-8,21,-16,17,1,-8,-38,-17,13,-10,32,22,-18,-26,-55,36,-10,-7,7,7,58,5,17,10,0,-33,-69,4,0,-3,0,-82,9,-19,42,-15,-57,-43,26,-20,4,26,1,4,16,-32,27,20,-13,127, 
  /* [1][0][][] */ 81,-92,41,85,-16,-73,-3,-50,-17,-92,-14,28,15,-69,-25,-58,-91,-10,15,25,-34,-108,-37,40,127,-64,-68,18,-20,90,-28,51,20,7,-43,20,-22,-10,63,-33,11,-77,69,-25,-45,7,66,-4,27,13,5,-62,75,-68,40,-24,9,20,-22,-111,46,-64,24,-41,-2,-77,33,47,38,61,-52,-10,-110,38,-28,62,34,102,17,-21,48,13,-79,33,-82,72,-9,66,-43,3,15,6,10,-49,39,-9, 
  /* [2][0][][] */ 25,20,12,-27,11,0,-3,37,58,-13,12,75,2,9,45,1,-10,-15,17,1,-15,-61,13,-54,-8,-16,-24,24,-10,24,127,-55,16,-64,-12,54,17,126,-49,-21,-6,-10,2,30,-43,-55,-60,22,32,27,-26,-36,21,-1,-7,-27,-17,6,8,35,-1,10,79,89,9,-81,15,-76,-2,-20,-5,16,-17,11,-19,15,25,53,7,19,13,86,32,-13,-8,-1,15,1,36,8,2,-44,-43,4,-13,68, 
  /* [3][0][][] */ -18,-21,-35,30,20,-16,-9,-32,-20,21,7,3,10,-18,41,-9,42,-40,30,10,-8,-9,-16,-8,-18,14,7,-16,14,-47,63,-17,9,-11,-24,45,-11,-4,-19,11,3,-74,15,-36,-12,2,-7,8,-127,45,-24,22,-123,-58,-34,-32,35,15,-17,61,-12,14,3,17,-13,-96,-43,22,51,13,-2,34,-37,6,-3,-45,-54,-61,25,-41,6,-23,16,68,44,65,38,6,26,-9,-6,11,-36,1,-15,-22, 
  /* [4][0][][] */ -3,-29,16,-62,5,-18,-45,11,-17,-46,-25,-10,1,70,5,10,46,-9,10,2,1,23,56,-2,-11,-10,21,9,-2,-5,2,-7,-39,17,9,19,37,-22,0,-10,7,12,-90,-33,28,-6,-8,-19,9,80,-7,-21,-24,-18,5,-7,-4,-27,28,39,7,4,3,-11,34,-111,21,-24,-41,12,-8,-3,-12,19,-18,21,-16,58,51,8,11,6,127,-34,36,-23,-7,-7,70,15,2,18,-38,21,3,-39, 
  /* [5][0][][] */ -8,1,1,0,1,-17,9,120,63,-18,-18,-25,-15,27,30,33,-25,-6,5,-31,-44,-15,3,-48,8,1,29,82,73,14,68,48,-50,28,13,-8,-55,-56,-28,-24,-44,-10,-2,-12,72,2,8,10,18,4,-12,5,-35,-19,9,-8,-33,-21,0,41,-57,32,-19,-43,5,13,-28,4,0,15,13,-7,25,16,14,-8,4,24,13,127,2,-42,28,37,8,-14,18,-34,8,-14,26,-119,-36,-24,-12,-116, 
  /* [6][0][][] */ -24,-5,-8,-57,-8,-28,-6,14,-1,18,-20,-3,39,-64,8,-14,-6,-66,28,5,-5,8,-17,28,85,-8,-1,1,22,-5,6,-16,-20,-2,-23,9,23,-2,26,34,-3,-31,-55,-19,-1,-18,29,-127,18,39,13,12,10,9,-1,-51,29,-11,-1,2,20,21,3,12,43,72,29,-20,-23,-12,11,-35,14,6,43,-3,-38,30,1,7,-9,0,49,-32,0,48,17,-26,17,2,-37,-10,-24,9,-12,13, 
  /* [7][0][][] */ 11,13,33,-26,-11,8,-13,-33,-5,-9,-13,-16,-5,-87,22,10,-1,-30,-10,-12,15,-16,-39,-13,-21,-6,-2,-25,7,7,6,6,-17,8,-14,-20,6,-9,-34,31,1,-13,-23,26,-5,11,-20,77,2,22,-18,-23,-22,10,-7,-45,45,3,-8,1,-9,-1,-17,-7,-17,35,12,-32,-13,-9,0,45,-2,-15,-10,12,47,2,-3,-20,3,-30,34,1,-30,127,0,-4,-41,-23,-3,24,-23,1,-2,10, 
  /* [8][0][][] */ -65,47,-64,7,56,-20,-5,28,18,78,-54,13,6,40,80,-19,-3,33,-84,25,14,20,-31,5,-44,-31,31,12,49,-98,-3,-9,25,1,15,-9,-28,35,-33,40,9,10,12,-127,-35,-13,54,-34,-60,15,8,77,-109,78,30,-6,4,-28,-18,-26,2,-42,12,21,-38,38,32,-21,-13,9,31,73,-37,43,36,36,-4,-95,-3,-34,-6,-14,29,5,-73,1,13,-39,10,32,-31,3,30,-20,-18,-18, 
  /* [9][0][][] */ 24,-63,-34,-34,13,20,-13,27,32,-15,-6,19,-45,-20,6,17,-5,6,42,-28,-35,2,-24,-35,39,11,35,-14,-27,-34,-21,-5,-12,7,17,38,9,39,-33,17,8,9,-19,-93,13,-8,28,-127,-35,4,-4,25,-21,9,-7,9,-42,23,-13,12,6,11,9,25,20,117,41,43,7,-8,6,-28,-17,1,-40,14,61,-6,12,17,-14,7,11,-42,-1,21,-5,2,-48,27,-35,-2,2,5,6,-14, 
  /* [10][0][][] */ 27,55,-19,32,74,-123,-1,-22,11,53,26,1,-13,18,16,-76,9,38,-32,36,-89,-15,-4,-26,-62,-29,-52,54,15,17,1,37,-8,-7,39,-12,70,-30,-6,-13,-15,69,48,-22,-55,-11,-39,12,-17,-21,-30,-4,-15,-13,3,-19,1,27,-20,-18,-4,12,-10,23,11,47,59,31,25,-4,30,44,-61,-25,-50,-15,3,21,-18,8,37,0,-69,-32,59,-53,100,-7,-22,17,25,-11,84,44,-21,-127, 
  /* [11][0][][] */ 45,36,-26,24,-5,10,57,6,-3,-15,-22,-9,0,1,37,2,-6,-8,-101,0,0,9,5,-6,-47,-22,-11,6,-2,20,2,-8,-4,8,10,20,9,12,-5,15,4,25,63,-96,29,-42,3,-6,-127,8,11,-44,24,17,-10,7,-17,-11,9,2,15,-16,-3,8,-51,56,-16,13,16,-3,29,9,-52,-24,11,24,-5,-34,-52,5,12,-4,91,49,7,-11,-13,-8,7,23,-12,-4,-6,8,-28,12, 
  /* [12][0][][] */ -35,-7,11,4,-25,33,17,6,127,5,-14,11,1,6,-39,-40,26,27,14,70,52,28,0,-24,1,7,16,-26,-99,12,34,-39,2,-6,-6,-20,19,-4,35,-7,-49,-16,2,7,3,28,9,-2,23,6,-37,9,4,-2,13,-3,72,-23,18,11,14,-15,12,-15,-5,27,-39,-5,-1,5,-7,-31,16,11,-69,8,24,-10,10,-60,-11,5,44,39,-18,-17,-25,-32,12,19,4,50,-15,-22,14,11, 
  /* [13][0][][] */ 25,-8,-29,26,30,2,4,0,-7,4,10,1,12,-13,12,-13,17,-68,-35,11,-9,-20,7,1,5,11,1,-6,-15,-30,-5,14,-3,8,8,41,15,1,3,21,-2,10,22,37,16,15,-12,-127,25,-4,5,8,-15,-1,14,7,-13,18,23,12,5,15,-6,5,-9,-20,-18,-54,8,11,-10,-30,-7,35,-8,21,-24,0,14,-4,24,-13,-14,18,14,26,13,14,-5,1,21,-6,2,14,-8,-4, 
  /* [14][0][][] */ -111,-57,27,46,37,-34,-32,19,-21,15,-10,8,61,12,-120,4,73,-16,-22,34,-17,-7,34,26,-109,6,30,-6,-38,-83,-35,-6,2,-1,29,-63,29,34,2,18,24,29,-8,-32,16,127,71,58,-121,53,6,40,-49,-11,43,-8,10,9,61,64,40,55,16,50,-3,-11,-40,53,2,86,-61,-83,-78,2,-8,45,-8,48,95,-1,57,21,29,23,44,14,44,37,30,42,65,-11,5,31,18,-29, 
  /* [15][0][][] */ 77,-24,36,4,-1,78,28,-14,-21,51,10,6,-77,-11,-9,30,19,36,52,-9,2,27,-84,62,17,15,45,-5,27,41,-63,-78,7,-43,41,0,34,-32,-61,-90,-4,36,3,31,0,50,-16,-33,107,-40,-45,31,45,-107,59,-101,3,-51,22,17,-127,-6,14,25,78,-23,-58,35,-27,70,-21,19,43,20,20,2,27,-54,66,-13,-9,-2,42,70,-14,-7,9,-55,1,-6,70,5,-66,60,28,-4, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017844250425696373, 0.011821813881397247, 0.011204494163393974, 0.0087570799514651299, 0.015411976724863052, 0.014978471212089062, 0.012515578418970108, 0.016281304880976677, 0.007633160799741745, 0.010288037359714508, 0.016224086284637451, 0.027599407359957695, 0.0181074608117342, 0.019718140363693237, 0.019952207803726196, 0.016341695562005043, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10787, -9116, 2921, 54773, -1239, -4449, -11740, 2053, -3009, 968, 3079, -2355, 1595, -7071, 6638, -6835, -1101, 16889, 25817, 2401, 1342, -2905, -214, -66, 19560, -1568, -1274, -3463, -6304, -7531, 6473, -8786, 1, -540, -261, 14333, 1458, -3464, 21074, 653, -416, 2170, -10203, -7803, -8449, 66721, 205, 14117, 27272, -12676, 157, 8802, 7742, -388, -4949, 2408, -13003, 1711, 2024, -6699, -1405, -810, -11699, -1788, 1342, 17668, 29829, 30388, -12691, 228, -8169, -697, 43344, 9698, -178, 570, 18530, 32820, -907, -7310, -1277, -9208, 422, -3427, 849, 397, 1423, -58, 1523, -2834, -52, -746, 537, -126, 827, 50287, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00017078671953640878, 0.00011594460374908522, 0.00025751764769665897, 3.8730333471903577e-05, 0.00017712415137793869, 0.0001644060539547354, 0.00028618649230338633, 8.5344014223664999e-05, 0.00013684968871530145, 0.00042235373985022306, 0.00015004599117673934, 0.00029706250643357635, 9.0500951046124101e-05, 0.00037274128408171237, 0.00015744331176392734, 0.00012033722305204719, 9.3864495283924043e-05, 0.0003006632614415139, 5.9813930420204997e-05, 0.00025306417956016958, 5.0961167289642617e-05, 0.00016986871196422726, 0.0001148260198533535, 0.00035314954584464431, 0.00017400467186234891, 0.00021665624808520079, 0.0001458820333937183, 0.00017494719941169024, 0.00012962610344402492, 0.0001043959055095911, 0.00012566997611429542, 0.00017314088472630829, 0.00011823938984889537, 0.00014756979362573475, 0.00021469281637109816, 0.00016231366316787899, 0.00040180838550440967, 0.00011450768943177536, 4.2991112422896549e-05, 0.00012512925604823977, 0.00021275297331158072, 0.00033827422885224223, 0.00032016029581427574, 0.00014299640315584838, 0.00015183715731836855, 4.773236287292093e-05, 0.00020219602447468787, 0.00024196061713155359, 9.3298673164099455e-05, 0.00016502835205756128, 0.00019020635227207094, 0.00014609329809900373, 0.00021700776414945722, 0.00026155760861001909, 0.00031297205714508891, 0.00039067654870450497, 0.00029312781407497823, 0.00018738374637905508, 0.00010503156227059662, 8.119129779515788e-05, 0.00028893820126540959, 0.00013848513481207192, 0.00028994909371249378, 0.00011123776494059712, 0.00017652544192969799, 0.00015910231741145253, 8.4461833466775715e-05, 5.8400622947374359e-05, 0.0003308601735625416, 0.00022244323918130249, 0.00021418351389002055, 9.431823855265975e-05, 0.00013356796989683062, 0.00012667992268688977, 0.00016689335461705923, 0.000240311463130638, 0.0005621504969894886, 5.1387716666795313e-05, 0.00027671462157741189, 0.0002590761287137866, 0.0001612772757653147, 0.00023828282428439707, 0.00012158107711002231, 0.00013473498984239995, 0.00012815331865567714, 9.0332228865008801e-05, 0.00013526718248613179, 0.00018196100427303463, 0.00018104146874975413, 9.7806536359712481e-05, 0.00020128904725424945, 0.0001100959416362457, 0.00014242582255974412, 0.00047349015949293971, 0.0015266693662852049, 7.593988993903622e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-20,105,-17,23,-62,-54,17,-5,99,-9,3,-8,-5,53,5,16,-32,3,73,3,33,-33,2,18,45,48,21,13,24,48,-6,28,9,-15,4,48,-61,-26,19,8,27,18,-84,-56,25,-5,-11,-21,-8,-6,49,5,-9,1,-3,-36,27,-31,27,-1,127,27,-14,-11,10,-51,66,35,2,-6,79,-33,68,3,17,-127,30,64,1,15,127,-14,37,28,-29,-20,35,-8,-14,82,0,19,-2,13, -49,13,-8,10,51,-7,-10,-127,38,14,-127,-5,-17,-12,4,90,17,-30,-14,-15,77,-96,127,27,-61,-31,-104,-16,27,35,-49,17,119,13,-14,-1,-24,127,-66,-127,8,-19,-30,14,47,-127,127,-44,-76,50,48,7,39,-64,31,56,35,41,-99,85,127,34,4,-20,42,-37,-95,-2,37,-31,-18,47,-48,-48,105,-4,-29,-60,-31,64,-67,62,-15,9,-12,47,54,-41,-28,54,-13,73,-127,-31,24,-127, 0,-5,-23,-76,8,19,37,22,-3,-2,4,63,0,-12,-11,6,-13,17,-15,17,6,25,25,-31,1,-31,10,13,-7,5,47,-80,44,17,9,-23,12,3,-32,-20,7,3,-16,9,22,-32,21,1,6,-8,5,-5,5,6,-5,8,-7,44,8,-2,11,-19,3,-17,-27,-17,32,-49,-105,-7,40,-17,-127,-23,-13,16,10,-11,7,12,-14,24,-35,-3,-40,21,25,36,-25,-18,25,-11,19,6,-1,-46, 
  /* [0][1][][] */ -41,58,-18,38,-85,-16,-10,-44,27,96,-45,-22,-31,-25,-7,63,127,-24,-89,-13,58,-127,-28,16,-36,-47,-127,-5,38,36,-49,28,-127,-74,-56,3,66,-3,-51,45,-19,86,1,-3,35,-52,-12,-32,127,45,-4,21,44,9,-37,-17,31,10,-122,127,-37,-89,21,127,-60,-35,-86,127,-35,127,-18,54,-35,-55,36,9,-35,-70,127,48,127,35,6,-2,127,29,-97,47,-38,-36,-101,40,96,102,29,-59, 127,127,127,127,-47,-127,127,24,127,-127,15,-127,-107,127,127,127,-16,-127,-62,-127,127,24,-67,127,127,127,-55,-127,127,127,-127,127,-9,-127,-123,127,-127,-45,94,108,-127,-127,127,127,127,-118,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-41,41,-107,-27,-69,-68,127,127,-71,127,127,-106,-127,127,-42,127,-127,-127,-127,126,-73,127,-42,127,79,127,-38,-127,-26,-108,-127,-126,-22,-127,-22,-127,-127,117, -24,66,-38,2,127,70,-22,49,6,24,-13,-4,-27,-31,-14,-7,-105,-22,-127,39,31,79,-12,-114,-34,-40,124,73,10,35,74,8,124,-48,127,-3,55,5,-92,14,37,24,-23,1,-23,-53,-13,-43,80,14,-12,40,-6,-4,-75,-14,24,20,127,-89,2,127,1,-36,-111,-28,-74,100,16,-16,112,25,-18,-57,11,47,-29,-7,-42,-2,-46,8,46,25,-89,36,127,-48,33,-22,127,-9,-112,35,34,18, 
  /* [0][2][][] */ -5,-40,-21,-62,-3,14,40,31,-1,9,-21,52,24,-35,-7,7,41,2,13,21,-10,31,-17,-25,2,-24,9,3,-10,-8,49,-76,-38,67,-27,-25,32,-35,-65,16,9,9,-34,19,13,-77,-12,-1,-9,6,16,-7,7,1,-23,6,-1,44,-47,35,-5,-12,5,17,-6,-9,22,-52,-55,12,-21,-12,-118,-31,0,18,15,-12,57,18,23,22,-39,16,12,26,-22,9,5,24,23,-5,18,40,-7,-31, -28,-10,-27,24,-45,74,-24,66,6,-6,53,-11,127,-7,-18,-18,-1,-40,-58,24,-23,80,-45,-111,-47,-47,101,70,14,43,54,-3,-121,64,-14,-23,-28,-27,-127,-4,45,-14,-15,36,-26,-44,-18,-48,-60,27,68,25,-11,-80,29,51,18,26,75,-55,20,-57,-8,0,19,-25,-127,-54,-11,-26,-62,24,36,-45,-30,-7,-44,24,-54,1,49,34,19,11,5,62,-94,127,15,127,-30,-18,113,-22,47,83, -9,-34,-26,29,12,64,-43,13,4,-6,0,14,11,-51,-10,-11,-44,-6,17,20,-24,7,-22,4,-3,20,-2,51,-3,-6,33,28,17,43,20,-22,-6,-26,-32,8,11,-11,22,9,-73,-31,-13,4,-2,-17,-1,-4,-8,9,-18,-5,0,-49,13,-29,-21,49,9,-28,-10,-2,35,-54,46,7,53,-20,31,-56,-18,22,11,11,-5,23,-30,32,88,-14,-17,56,38,-10,110,11,3,-18,9,-23,-6,-51, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0072584357112646103, 0.0049276454374194145, 0.010944499634206295, 0.0016460390761494637, 0.0075277760624885559, 0.006987257394939661, 0.01216292567551136, 0.0036271205171942711, 0.0058161118067800999, 0.017950033769011497, 0.0063769547268748283, 0.012625155970454216, 0.0038462902884930372, 0.01584150455892086, 0.0066913403570652008, 0.005114331841468811, 0.0039892410859465599, 0.012778188101947308, 0.0025420919992029667, 0.010755227878689766, 0.0021658495534211397, 0.0072194202803075314, 0.0048801056109368801, 0.015008855611085892, 0.0073951985687017441, 0.0092078903689980507, 0.006199986208230257, 0.0074352556839585304, 0.0055091092362999916, 0.0044368258677423, 0.0053409738466143608, 0.0073584876954555511, 0.0050251740030944347, 0.0062717162072658539, 0.0091244447976350784, 0.0068983305245637894, 0.017076855525374413, 0.0048665767535567284, 0.0018271221779286861, 0.0053179934620857239, 0.0090420013293623924, 0.014376654289662838, 0.013606811873614788, 0.006077346857637167, 0.0064530791714787483, 0.0020286254584789276, 0.008593331091105938, 0.010283325798809528, 0.0039651934057474136, 0.0070137046277523041, 0.0080837700515985489, 0.0062089650891721249, 0.0092228297144174576, 0.011116198264062405, 0.013301311992108822, 0.016603752970695496, 0.012457932345569134, 0.0079638091847300529, 0.0044638412073254585, 0.0034506299998611212, 0.0122798727825284, 0.0058856182731688023, 0.012322836555540562, 0.0047276047989726067, 0.0075023313984274864, 0.0067618484608829021, 0.0035896277986466885, 0.0024820263497531414, 0.014061557129025459, 0.0094538377597928047, 0.0091027989983558655, 0.004008525051176548, 0.0056766383349895477, 0.005383896641433239, 0.0070929671637713909, 0.010213237255811691, 0.023891394957900047, 0.0021839779801666737, 0.01176037173718214, 0.011010735295712948, 0.0068542840890586376, 0.010127020068466663, 0.0051671955734491348, 0.0057262368500232697, 0.0054465159773826599, 0.003839119803160429, 0.0057488549500703812, 0.0077333427034318447, 0.00769426254555583, 0.004156777635216713, 0.0085547845810651779, 0.0046790773048996925, 0.0060530970804393291, 0.020123330876231194, 0.06488344818353653, 0.0032274452969431877, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 24157, 1779, 9368, -893, 7209, 7299, 20490, 7476, -1614, 19234, 9596, 2036, 8788, 51276, -502, -2150, 12673, 13552, 2626, -232, -853, 16801, 5812, 3662, 8317, 6086, 6895, 4803, 73, -60, 7768, 12446, 19027, 2122, 10850, -656, 24113, 8363, 1049, 5657, 898, 16724, 14256, 5505, 3662, 13655, 17894, 6787, 5786, 5419, 383, -1026, 20617, 7488, 8631, 22621, -387, 8732, 3692, 4745, 15809, 7984, 3482, 7811, 7917, 5323, 8188, -959, 19471, 9856, 10929, -1584, -1878, 4013, 1836, 3208, 25352, 16441, 18533, -2422, 5476, -6330, -2396, 723, 9387, 6846, 8313, 5924, 14811, 5054, 10403, 4544, 21643, 25128, -13397, 18108, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00010738568380475044, 0.00018550716049503535, 0.00014377071056514978, 0.00062994315521791577, 0.00022269786859396845, 0.00012727420835290104, 0.00015207527030725032, 0.00046800810378044844, 0.00028582732193171978, 9.3348404334392399e-05, 0.00015065334446262568, 0.00039993898826651275, 0.00031424025655724108, 9.4312883447855711e-05, 0.00018772728799376637, 0.00031439412850886583, 0.0001767023786669597, 0.00017149206541944295, 0.00017221021698787808, 0.00054959487169981003, 0.00032064609695225954, 0.00014651895617134869, 0.00026040375814773142, 0.00021094561088830233, 0.00021062315499875695, 0.0003401483700145036, 0.00020590735948644578, 0.00018819811521098018, 0.00056339427828788757, 0.00028258873498998582, 0.00018290831940248609, 0.00015240618085954338, 0.00010298279812559485, 0.00050794793060049415, 0.00015267466369550675, 0.00043242287938483059, 9.4351446023210883e-05, 0.00031448667868971825, 0.00043967654346488416, 0.00017050538735929877, 0.0005377815687097609, 0.00011342484503984451, 0.00014968105824664235, 0.00013644802675116807, 0.00030768220312893391, 0.00023818650515750051, 0.00015856118989177048, 0.0002131274959538132, 0.00027603900525718927, 0.00016787232016213238, 0.00037138600600883365, 0.00064050481887534261, 0.00012877790140919387, 0.00021351368923205882, 0.00026978619280271232, 8.2557846326380968e-05, 0.00028867126093246043, 0.00019787941710092127, 0.0002096465032082051, 0.00033713399898260832, 0.00010624910646583885, 0.00017635882250033319, 0.00029934314079582691, 0.00035372906131669879, 0.00013316917465999722, 0.00021075508266221732, 0.00023917751968838274, 0.00036296964390203357, 0.00013770829536952078, 0.00011612122034421191, 0.00018210111011285335, 0.00030485718161799014, 0.00020264087652321905, 0.00032590891350992024, 0.0002293058205395937, 0.00039528202614746988, 9.289187437389046e-05, 0.0002725109807215631, 8.9196029875893146e-05, 0.00049382535507902503, 0.00020226194465067238, 0.00032503300462849438, 0.00015667853585910052, 0.00035768828820437193, 0.00016814861737657338, 0.00022693407663609833, 0.00019589216390158981, 0.00023543657152913511, 0.000112851572339423, 0.00031599300564266741, 0.00013508272240869701, 0.0003726690192706883, 9.8199678177479655e-05, 0.00010954505705740303, 0.0002178462891606614, 0.00018188374815508723, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 43,-15,127,127,81,-24,41,-30,118,-6,-54,-70,38,94,-36,-98, 
  /* [1][0][][] */ 45,93,-11,-9,86,-5,22,30,48,75,-33,127,1,-31,89,-84, 
  /* [2][0][][] */ 18,-45,4,-11,-43,47,-43,78,-80,-77,17,80,-18,-127,70,-81, 
  /* [3][0][][] */ 125,127,-3,38,-125,-13,-62,-30,5,2,115,-77,-55,99,-47,-38, 
  /* [4][0][][] */ 0,-1,17,3,-25,27,-20,43,-79,-48,-3,-11,-6,-127,21,9, 
  /* [5][0][][] */ 120,-52,-17,-3,-3,-127,-34,11,-12,2,-120,-7,22,-9,-8,26, 
  /* [6][0][][] */ -127,-64,-15,92,-57,-16,-50,26,-126,-86,-65,-36,27,53,-10,106, 
  /* [7][0][][] */ -9,15,-68,41,36,-127,-26,35,8,-30,11,-8,-4,18,-42,10, 
  /* [8][0][][] */ 29,-44,-11,-16,6,25,-51,-52,-16,8,-64,2,-127,8,-2,34, 
  /* [9][0][][] */ 30,-61,58,127,0,21,-3,-67,119,-84,-8,-18,-1,54,-75,18, 
  /* [10][0][][] */ -113,-98,-6,-48,116,31,26,77,127,-94,-123,38,116,-104,-107,84, 
  /* [11][0][][] */ 45,-20,-127,18,58,24,-24,42,-12,-34,-15,-10,-6,23,-39,-1, 
  /* [12][0][][] */ 110,-45,3,13,-14,-57,-54,-25,47,7,-127,-12,-52,-16,8,66, 
  /* [13][0][][] */ 54,-78,49,-75,117,9,-126,-127,43,-105,9,16,13,-23,33,8, 
  /* [14][0][][] */ -56,42,-102,-56,91,-127,70,-62,53,45,-1,-92,33,121,-23,32, 
  /* [15][0][][] */ 18,-1,49,33,40,-48,-32,-6,10,-55,-61,-17,-127,-55,-6,61, 
  /* [16][0][][] */ -115,51,10,20,-14,100,35,89,-13,25,127,14,24,28,15,-26, 
  /* [17][0][][] */ -7,-7,-44,-25,-34,10,43,70,-22,127,-16,8,-9,77,60,-5, 
  /* [18][0][][] */ 4,127,-56,-9,5,10,61,-70,20,121,-49,107,8,-53,29,-91, 
  /* [19][0][][] */ 3,-13,36,15,9,47,-11,13,10,2,-39,-9,-127,-3,-12,20, 
  /* [20][0][][] */ 84,-58,-9,-80,-37,19,33,-89,-47,32,-127,-43,29,-1,61,14, 
  /* [21][0][][] */ 58,-15,127,44,-18,41,22,-4,0,18,-24,-18,-14,84,7,-17, 
  /* [22][0][][] */ 34,5,24,1,-23,3,17,127,9,-5,8,32,12,35,23,29, 
  /* [23][0][][] */ -37,8,-77,4,31,-127,6,46,-11,-36,-2,-19,-78,8,-12,37, 
  /* [24][0][][] */ 43,-60,4,-73,53,0,-34,-17,24,28,65,93,-54,80,127,45, 
  /* [25][0][][] */ -127,-79,-43,3,10,14,4,-24,-55,6,-68,23,21,33,24,59, 
  /* [26][0][][] */ 2,-4,51,-7,-14,20,-40,66,-83,-72,3,13,-4,-127,36,-18, 
  /* [27][0][][] */ -90,33,-36,27,30,-12,-4,25,37,-35,127,21,-16,11,-12,-22, 
  /* [28][0][][] */ -17,-7,19,32,0,5,14,82,21,18,-23,-4,-127,-12,-14,36, 
  /* [29][0][][] */ -14,72,33,-36,35,-20,27,-31,-127,37,-28,0,-3,29,-88,9, 
  /* [30][0][][] */ -13,-12,-127,-45,32,-61,-9,11,-18,-21,-1,-28,-46,-23,0,14, 
  /* [31][0][][] */ 127,-28,-123,14,37,-1,-43,51,-9,-1,-76,-57,16,-16,-77,24, 
  /* [32][0][][] */ -127,38,39,39,13,89,8,35,18,-10,125,-4,-35,32,-19,-22, 
  /* [33][0][][] */ 2,-10,127,-25,-61,27,1,-40,-9,3,-2,18,-13,13,41,23, 
  /* [34][0][][] */ -22,-22,-38,-127,34,25,-7,-45,-30,-74,-28,-123,-44,-2,41,12, 
  /* [35][0][][] */ -1,-34,36,53,54,-18,18,-19,-118,41,-6,29,-21,127,-46,-47, 
  /* [36][0][][] */ -121,58,-33,-13,-17,41,43,91,-2,24,127,-17,11,14,17,-13, 
  /* [37][0][][] */ -40,1,127,-28,-68,-68,20,-35,19,15,-4,-5,-6,-60,64,7, 
  /* [38][0][][] */ 17,-22,-2,18,38,-56,-69,16,-27,-29,69,-14,127,37,-13,12, 
  /* [39][0][][] */ -25,-22,9,-55,-41,-74,64,127,-42,-20,13,-42,3,60,40,66, 
  /* [40][0][][] */ 67,6,-22,-8,-13,79,-7,10,12,4,7,9,127,6,-19,-14, 
  /* [41][0][][] */ -1,-13,-28,-127,30,-11,-32,-79,-2,-51,10,-41,-7,-23,-13,33, 
  /* [42][0][][] */ 48,55,2,97,-111,-10,-92,-3,-81,-67,89,-80,-32,127,-54,11, 
  /* [43][0][][] */ 21,122,-25,127,26,29,37,-75,-49,79,-5,33,2,-50,43,43, 
  /* [44][0][][] */ 2,-24,-127,25,47,72,-46,56,-12,-17,25,-12,16,-25,-56,7, 
  /* [45][0][][] */ -3,26,-7,-127,-16,5,46,-9,-7,24,-22,11,5,-91,31,-33, 
  /* [46][0][][] */ 8,30,60,-21,12,10,-45,52,16,-51,-18,9,-2,127,47,-20, 
  /* [47][0][][] */ 16,-17,32,-36,-34,23,-60,58,-6,-28,21,32,11,-127,42,9, 
  /* [48][0][][] */ 1,-8,5,-127,-9,-19,-2,7,9,-25,16,-18,2,44,-9,56, 
  /* [49][0][][] */ 30,-40,-3,127,103,17,2,47,-59,14,44,47,-7,41,127,-17, 
  /* [50][0][][] */ -34,-4,67,-24,-1,123,-19,-73,41,-22,127,18,91,-9,-6,-66, 
  /* [51][0][][] */ 34,55,7,13,17,0,-41,16,43,3,-4,127,14,24,31,-60, 
  /* [52][0][][] */ -28,67,125,3,22,-27,15,-45,-27,1,18,36,-5,98,-127,-29, 
  /* [53][0][][] */ 2,-20,-40,-127,-42,4,13,-37,-7,44,4,-3,27,-21,45,5, 
  /* [54][0][][] */ 5,9,-30,-45,11,9,-10,6,59,-19,6,-31,-9,127,13,23, 
  /* [55][0][][] */ -15,-23,-52,-21,6,-45,-11,-127,1,-99,-5,-1,-40,-81,-45,-9, 
  /* [56][0][][] */ 42,41,33,62,6,-19,11,127,28,-24,0,-32,74,-9,-47,37, 
  /* [57][0][][] */ 88,-21,127,-18,-70,-48,6,-25,3,14,-98,33,55,-40,47,21, 
  /* [58][0][][] */ 102,101,3,96,-127,-28,-2,45,-18,21,90,-32,-77,-59,-23,-75, 
  /* [59][0][][] */ 127,-30,1,-2,-19,-19,-1,17,-34,19,-114,-7,19,1,-3,25, 
  /* [60][0][][] */ -127,31,-12,-11,13,4,27,36,0,0,85,-8,-41,-3,13,-6, 
  /* [61][0][][] */ -127,72,25,19,21,-14,-75,-61,123,-112,95,-7,57,-45,-109,-54, 
  /* [62][0][][] */ -19,-47,-127,67,84,118,-13,104,29,-75,55,-5,-74,2,-105,-18, 
  /* [63][0][][] */ -47,11,127,-34,-55,-50,29,-33,8,17,7,12,-13,-48,68,9, 
  /* [64][0][][] */ 35,61,-18,31,47,-7,96,-127,-24,120,1,-28,-14,-105,-7,62, 
  /* [65][0][][] */ 3,19,10,-20,70,8,-1,-127,-18,-59,-27,-52,-10,-37,45,19, 
  /* [66][0][][] */ -127,-5,-14,11,-44,19,11,-37,-87,-43,-88,57,67,30,47,82, 
  /* [67][0][][] */ -9,-62,-1,127,2,-13,-40,32,72,19,0,-32,1,-42,-85,-24, 
  /* [68][0][][] */ 7,-2,-17,127,-54,-22,-1,-37,-41,33,8,-27,-19,-67,-23,-39, 
  /* [69][0][][] */ 82,99,23,97,58,-26,61,-127,6,90,25,50,-4,-53,38,-17, 
  /* [70][0][][] */ 14,-40,5,-95,127,-26,36,22,78,-32,68,-52,3,105,64,106, 
  /* [71][0][][] */ 9,47,7,77,41,-127,-42,95,32,-96,19,12,11,-52,-55,35, 
  /* [72][0][][] */ -127,-77,-10,55,19,43,-26,12,-43,-27,-92,39,55,17,0,91, 
  /* [73][0][][] */ -17,-14,-19,67,8,-15,3,-16,71,19,-6,11,15,127,-67,-39, 
  /* [74][0][][] */ 66,-53,18,-32,-43,-13,38,-7,-41,-12,-109,19,-127,0,31,51, 
  /* [75][0][][] */ -19,-6,-21,127,-25,13,-2,-29,-73,14,-6,-26,-2,-62,-16,-25, 
  /* [76][0][][] */ -5,-14,1,42,34,17,-22,-127,10,-123,12,23,-21,-22,31,-43, 
  /* [77][0][][] */ 127,-34,35,39,-44,-5,-44,-1,39,-11,-45,40,26,11,-48,28, 
  /* [78][0][][] */ -12,-8,52,7,20,-10,-66,35,54,-26,-45,-31,24,127,43,-37, 
  /* [79][0][][] */ -3,20,45,14,39,51,-47,-44,15,-44,67,-23,127,-19,-22,-39, 
  /* [80][0][][] */ -97,-94,-61,127,20,40,20,-12,-59,33,-102,20,57,-69,-11,23, 
  /* [81][0][][] */ 69,2,-77,43,127,92,-35,-44,-2,-105,-26,-76,-23,-8,-97,28, 
  /* [82][0][][] */ 113,122,-2,38,-127,-16,-70,-22,-79,-7,115,-56,-53,94,-10,-42, 
  /* [83][0][][] */ 127,46,6,-26,4,-15,-2,30,33,16,87,-33,-50,-28,-30,-74, 
  /* [84][0][][] */ 4,-74,-64,-34,32,40,-17,-127,-42,-62,29,5,-17,11,6,3, 
  /* [85][0][][] */ -17,-19,-56,-44,-17,-21,69,100,-10,127,-20,-49,38,82,88,-26, 
  /* [86][0][][] */ 104,-15,0,-8,1,-26,1,-20,-6,0,-127,13,28,17,-19,27, 
  /* [87][0][][] */ -12,43,8,-25,-13,70,-21,44,1,-23,17,19,16,-127,19,-5, 
  /* [88][0][][] */ -17,-15,-86,-58,66,9,-24,-127,-10,-34,3,-28,-48,-11,16,-27, 
  /* [89][0][][] */ 34,-20,30,-127,33,-6,-58,115,80,-72,25,7,-2,49,32,47, 
  /* [90][0][][] */ -12,21,-44,49,62,-1,105,-83,65,127,-36,37,24,2,-16,-15, 
  /* [91][0][][] */ 39,-20,-31,-8,10,-127,-17,-11,-9,-13,-44,-9,20,-16,5,15, 
  /* [92][0][][] */ 29,14,127,77,43,22,18,46,-26,41,-68,45,36,86,7,-14, 
  /* [93][0][][] */ 127,-38,-32,-8,-29,-52,9,39,-18,41,-115,-2,1,15,1,43, 
  /* [94][0][][] */ 25,-27,44,88,121,-47,-28,45,9,-38,-17,48,-19,127,-23,-93, 
  /* [95][0][][] */ -115,51,36,44,17,47,28,2,14,13,127,3,-14,31,-17,-29, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00042599154403433204, 0.00073589402018114924, 0.00057032838230952621, 0.0024989407975226641, 0.00088342698290944099, 0.00050488795386627316, 0.00060327199753373861, 0.0018565555801615119, 0.001133857062086463, 0.00037030663224868476, 0.00059763132594525814, 0.0015865301247686148, 0.001246569212526083, 0.00037413265090435743, 0.00074470107210800052, 0.0012471796944737434, 0.00070096604758873582, 0.00068029708927497268, 0.00068314594682306051, 0.002180204726755619, 0.0012719808146357536, 0.00058123050257563591, 0.0010330035584047437, 0.0008368065464310348, 0.00083552743308246136, 0.0013493449660018086, 0.00081682018935680389, 0.00074656883953139186, 0.0022349460050463676, 0.0011210098164156079, 0.00072558457031846046, 0.00060458469670265913, 0.00040852560778148472, 0.0020149941556155682, 0.00060564978048205376, 0.001715391525067389, 0.00037428562063723803, 0.0012475467519834638, 0.001744166249409318, 0.00067638303153216839, 0.0021333419717848301, 0.00044994847849011421, 0.00059377436991780996, 0.0005412798491306603, 0.0012205538805574179, 0.0009448693017475307, 0.00062900123884901404, 0.00084546196740120649, 0.0010950275463983417, 0.0006659378414042294, 0.0014732624404132366, 0.0025408379733562469, 0.00051085295854136348, 0.00084699393482878804, 0.0010702230501919985, 0.00032750124228186905, 0.0011451388709247112, 0.00078497390495613217, 0.00083165307296440005, 0.0013373871333897114, 0.00042148280772380531, 0.00069960317341610789, 0.0011874734191223979, 0.0014032186008989811, 0.0005282728816382587, 0.00083605077816173434, 0.00094880058895796537, 0.0014398753410205245, 0.0005462792469188571, 0.00046064480557106435, 0.0007223824504762888, 0.0012093472760170698, 0.00080386229092255235, 0.0012928580399602652, 0.00090964022092521191, 0.0015680562937632203, 0.00036849561729468405, 0.0010810320964083076, 0.00035383444628678262, 0.0019589709118008614, 0.00080235907807946205, 0.0012893832754343748, 0.00062153284670785069, 0.0014189245412126184, 0.00066703389165922999, 0.00090023170923814178, 0.00077709060860797763, 0.00093396048760041595, 0.0004476743342820555, 0.0012535222340375185, 0.00053586374269798398, 0.0014783521182835102, 0.00038955130730755627, 0.00043455761624500155, 0.0008641810854896903, 0.00072152016218751669, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -39415, 3391, 701, -8719, -1140, -8518, -10139, -42840, 3163, 24000, 32097, -9673, -2790, -22793, 39573, -42465, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00066176673863083124, 0.0009241067455150187, 0.00099956966005265713, 0.00094303063815459609, 0.00098064925987273455, 0.0011147548211738467, 0.0010565222473815084, 0.00071026512887328863, 0.00053490599384531379, 0.00058566260850057006, 0.00077018834417685866, 0.00059829239035025239, 0.00094202137552201748, 0.0012983212945982814, 0.00056484900414943695, 0.00065131991868838668, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -19,2,-25,13,23,-1,4,107,-46,12,48,-1,13,-21,-11,12,12,-17,-3,0,63,-4,18,127,-13,89,0,-18,23,-11,27,-29,-16,50,25,-53,14,47,15,-11,-110,-24,25,46,35,28,-118,-49, 
  /* [1][0][][] */ -35,-9,18,16,-33,10,4,54,-50,-37,5,-40,-24,-17,2,-6,-25,113,-6,20,6,11,-28,-15,27,-40,21,22,-26,-80,-34,21,-20,-6,35,-6,-7,-38,-2,17,-18,-29,127,12,10,1,22,-9, 
  /* [2][0][][] */ -23,-6,-11,-36,-1,-63,4,-18,0,15,17,26,15,14,-13,8,-3,-19,-24,-14,-2,-2,-1,-127,-12,72,-17,4,-1,-21,-4,-5,-8,54,9,-1,25,8,31,2,-38,4,-20,-10,-3,-8,17,5, 
  /* [3][0][][] */ -5,34,1,-33,0,-1,3,-2,-22,-1,-2,36,-127,8,-8,-1,3,7,-22,0,-31,6,7,18,-9,-11,0,24,-9,16,2,16,4,1,15,22,-9,27,44,3,12,6,22,-32,10,-7,4,20, 
  /* [4][0][][] */ 35,-31,11,9,22,29,20,-20,-33,5,-12,-21,3,13,2,16,20,-7,-83,1,-3,9,16,73,1,-24,3,50,9,-78,21,10,15,-36,30,-127,14,36,1,14,-20,20,6,-26,-10,-20,5,7, 
  /* [5][0][][] */ 31,4,-17,60,1,-9,4,26,3,-5,42,8,5,49,2,3,-23,23,30,2,13,1,1,-22,1,-50,0,-22,-4,-12,4,9,66,-127,3,33,-10,-13,15,3,-87,58,20,-4,-7,2,-100,-10, 
  /* [6][0][][] */ 25,-2,6,2,-14,-5,5,-15,-3,5,2,3,-17,10,4,5,1,-13,127,8,4,10,17,-36,3,2,27,-11,-12,-2,-1,6,1,-13,31,-39,0,-42,69,15,-2,-6,-6,7,-11,4,8,-10, 
  /* [7][0][][] */ -44,-16,-8,34,-8,78,-7,46,-5,36,-13,127,80,0,-5,-4,-6,-22,-12,-20,-28,-9,-19,71,-3,-39,-55,-30,-8,-16,-17,-10,2,5,-27,6,11,-56,106,-5,27,22,-66,-62,22,-11,2,0, 
  /* [8][0][][] */ -46,-53,-1,6,-6,1,0,30,3,-73,5,46,56,3,8,3,-17,64,-29,5,-48,25,-6,-11,4,5,1,43,-10,118,-6,23,-4,1,-18,-127,-117,70,29,27,20,-3,115,-23,5,34,19,33, 
  /* [9][0][][] */ -25,7,-5,33,17,-36,-5,0,57,-39,9,59,-57,7,12,-2,-10,17,-37,-24,49,6,-11,-15,1,12,48,-23,7,13,11,2,-5,18,74,-108,-13,-127,-94,6,-29,28,55,7,6,11,-18,-42, 
  /* [10][0][][] */ -21,-5,-30,-127,42,88,9,-12,2,30,26,8,48,-48,-35,23,35,-43,54,-29,31,-23,38,49,-49,-108,9,-31,51,33,43,-39,-28,-84,26,-6,17,-45,4,-35,-35,-61,-13,10,11,13,20,-34, 
  /* [11][0][][] */ -4,53,-7,61,39,-63,-87,-20,3,54,-13,-2,-5,50,-4,-81,17,46,8,-7,-56,-109,8,0,16,-44,14,-29,54,-44,24,-89,53,-26,-32,-92,101,19,6,-127,-5,70,101,-73,-12,-50,37,32, 
  /* [12][0][][] */ 125,-3,-15,14,3,19,1,102,19,-10,-57,-22,0,15,-9,-2,-10,11,-4,-6,6,-2,4,20,-2,16,-6,6,-1,10,-6,1,2,-63,-11,12,-18,-19,-27,1,-15,-79,5,-127,-53,-12,79,-8, 
  /* [13][0][][] */ 10,4,1,6,7,-11,2,1,0,5,3,20,-6,3,7,-2,6,1,11,3,15,-12,9,-2,2,0,16,127,10,-5,9,-2,3,1,-36,22,10,-5,6,-15,-12,-5,2,6,-1,-2,-8,-13, 
  /* [14][0][][] */ 62,-23,45,-68,51,29,42,-103,-54,-51,-1,127,-76,-2,62,13,50,23,-57,68,16,19,70,-19,25,60,-29,-113,26,-31,64,41,-4,73,-126,-54,-45,48,94,11,-37,8,54,-2,0,-2,14,-26, 
  /* [15][0][][] */ -13,-53,-72,-37,58,32,78,-53,-13,23,-15,-34,83,20,-94,60,58,52,79,-87,-94,-27,59,-20,-93,40,25,57,56,46,50,-46,26,56,89,127,-15,-114,-9,-31,87,63,108,-48,-10,-34,-13,59, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028125086799263954, 0.039274536073207855, 0.042481709271669388, 0.040078800171613693, 0.041677594184875488, 0.047377079725265503, 0.044902194291353226, 0.03018626756966114, 0.022733503952622414, 0.024890659376978874, 0.032733004540205002, 0.025427427142858505, 0.040035907179117203, 0.055178653448820114, 0.024006081745028496, 0.027681095525622368, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 2082, 43044, -1134, 31371, 4962, 127422, -1913, 47301, 1476, 32346, 25421, -2640, -1886, 29010, -1087, -1990, -172, -928, -543, -2104, -954, -2741, 628, -19330, -4138, 45816, 121879, 104494, 2568, 7608, -1635, 409, 24705, -354, 41850, -8348, 43976, -422, 44946, 2449, 1029, 55975, -904, 2770, 55056, -132, 2654, 53450, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.0114754382520914e-05, 3.6995101254433393e-05, 0.00017430578009225428, 6.5039261244237423e-05, 0.00014348202967084944, 6.570858386112377e-05, 0.00015912401431705803, 0.0001242832513526082, 9.1961475845891982e-05, 4.4218872062629089e-05, 4.6239296352723613e-05, 0.00012446918117348105, 4.4891912693856284e-05, 3.7486366636585444e-05, 0.0001567419822094962, 0.00019133354362566024, 0.00017864309484139085, 7.6002645073458552e-05, 0.0001555246562929824, 0.00013974023750051856, 0.00012242498632986099, 0.00016049903933890164, 0.00010660065163392574, 0.00012485664046835154, 0.0001013758810586296, 9.5767361926846206e-05, 2.2824604457127862e-05, 6.6219807195011526e-05, 0.00013550097355619073, 8.4281207819003612e-05, 0.00011608117347350344, 0.00013212082558311522, 5.5374672228936106e-05, 0.0001555680064484477, 2.7566384233068675e-05, 6.7672153818421066e-05, 0.00013528583804145455, 0.00010476601164555177, 0.00013211760960984975, 7.0026188041083515e-05, 0.00010339538857806474, 0.00010605293937260285, 8.3724233263637871e-05, 8.8392262114211917e-05, 3.7488236557692289e-05, 0.00017448957078158855, 9.89301479421556e-05, 3.7991791032254696e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 70,-92,98,70,53,-33,105,-65,60,-89,-79,47,52,-42,-71,-89,102,78,50,78,67,-73,-83,50,-32,-40,-63,-64,-66,61,-63,-114,-13,41,68,63,-65,52,-50,-23,50,-74,58,62,-94,11,75,-34, 83,-96,127,85,-77,-68,-57,-84,96,-102,-63,74,79,-108,-94,91,-39,95,83,127,85,-115,52,71,-52,-76,-68,-80,55,79,-30,-127,-85,79,80,83,-82,81,-83,-15,75,-94,82,90,-73,-127,93,-103, 35,-46,70,38,18,-41,-47,-38,42,-32,5,34,29,-78,-54,-2,-55,37,34,70,34,-54,32,25,-27,-45,-43,-22,31,30,88,-89,-84,44,35,33,-29,38,-37,-11,40,-40,34,42,-5,-9,36,-75, 
  /* [0][1][][] */ 93,-114,-41,94,55,-82,127,-89,87,-114,-71,82,83,-111,-13,-127,127,106,74,-39,84,108,-127,73,72,-75,-93,-98,-127,86,-69,-9,-88,70,107,95,-85,78,-80,88,84,-100,87,91,-89,107,94,-93, 127,-127,-66,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-22,96,-66,127,127,-51,127,127,69,127,127,-127,-127,-127,52,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-79,-35,67,37,-62,-49,-62,55,-42,-61,57,48,-53,-16,10,-63,49,58,-30,57,64,51,63,66,-64,-61,-44,36,54,127,15,-62,69,48,49,-49,60,-59,55,60,-57,54,62,-62,-67,58,-57, 
  /* [0][2][][] */ 44,-51,-46,50,26,-53,63,-43,41,-72,-3,39,56,-73,83,-79,72,50,35,-31,27,-11,-77,30,-24,-44,-49,-49,-75,31,-42,90,-72,36,48,42,-27,36,-42,-87,47,-50,41,45,-23,16,40,-74, 72,-76,-48,81,-57,-64,-73,-67,50,-77,-65,60,74,-47,127,32,-48,58,62,-44,55,-18,41,66,-49,-66,-77,-61,31,61,-24,117,-53,64,57,58,-49,61,-67,-105,68,-67,61,63,-86,50,62,-52, 41,-41,-28,47,27,-20,-18,-34,14,-27,-52,28,31,5,67,24,-37,21,29,-32,27,0,39,41,-25,-29,-48,-24,33,33,61,67,2,33,15,22,-23,29,-29,-56,27,-33,26,29,-63,9,31,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034048771485686302, 0.0015722918324172497, 0.0074079954065382481, 0.0027641684282571077, 0.0060979863628745079, 0.0027926147449761629, 0.0067627704702317715, 0.0052820383571088314, 0.0039083627052605152, 0.0018793019698932767, 0.0019651700276881456, 0.0052899401634931564, 0.001907906262204051, 0.001593170571140945, 0.0066615338437259197, 0.0081316754221916199, 0.0075923316180706024, 0.0032301123719662428, 0.006609797477722168, 0.0059389597736299038, 0.0052030617371201515, 0.0068212090991437435, 0.0045305276289582253, 0.00530640734359622, 0.0043084747157990932, 0.0040701129473745823, 0.00097004568669945002, 0.0028143418021500111, 0.0057587912306189537, 0.0035819511394947767, 0.0049334499053657055, 0.0056151347234845161, 0.0023534235078841448, 0.0066116400994360447, 0.0011715713189914823, 0.0028760663699358702, 0.0057496479712426662, 0.0044525554403662682, 0.005614998284727335, 0.002976112999022007, 0.0043943040072917938, 0.0045072496868669987, 0.0035582799464464188, 0.003756670979782939, 0.0015932500828057528, 0.0074158068746328354, 0.0042045312002301216, 0.0016146510606631637, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 741, 866, 2054, 587, 10789, 17251, 2849, -28, -922, -653, 1262, 1361, 3324, 1118, 30684, 3393, 1939, -1182, -263, 3404, -2265, 11572, 9943, 10291, 5969, 305, 4325, 5187, 10533, -612, 10947, 6788, 625, -146, 4870, 3756, -2243, 260, -1082, 5812, 1335, -553, -913, 64, 1191, 4030, 680, 1168, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00031893406412564218, 0.00081698724534362555, 0.00027084056637249887, 0.00026758000603877008, 0.0002032662887359038, 0.00023415540636051446, 0.00039036860107444227, 0.00022330437786877155, 0.00031989120179787278, 0.00068671844201162457, 0.00080050755059346557, 0.00023547219461761415, 0.00037827796768397093, 0.00066451966995373368, 0.00011760296183638275, 0.0003711325116455555, 0.00026274425908923149, 0.00034080524346791208, 0.00027015063096769154, 0.00027721512014977634, 0.00027521152514964342, 0.00022086103854235262, 0.0003717093204613775, 0.00015162673662416637, 0.00026724950294010341, 0.00029169165645726025, 0.0016084349481388927, 0.00035936664789915085, 0.00016725993191357702, 0.00039905635640025139, 0.00023746438091620803, 0.00017919077072292566, 0.00064810278126969934, 0.00024815171491354704, 0.00076197402086108923, 0.00048903032438829541, 0.00062761065782979131, 0.00039169582305476069, 0.00017409562133252621, 0.0003217627527192235, 0.00014845342957414687, 0.00022196827922016382, 0.00033544877078384161, 0.00024168462550733238, 0.0016364706680178642, 0.00034493117709644139, 0.0003050145460292697, 0.0010062350193038583, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,3,-4,76,-38,39,28,-28, 
  /* [1][0][][] */ 33,84,53,22,13,-41,111,127, 
  /* [2][0][][] */ -38,-3,0,-3,-127,-12,10,3, 
  /* [3][0][][] */ 99,-10,-10,-119,-127,18,34,-16, 
  /* [4][0][][] */ -127,45,-18,-2,64,-19,46,28, 
  /* [5][0][][] */ -100,-34,21,-12,-127,10,11,89, 
  /* [6][0][][] */ -18,-127,25,-15,14,3,1,33, 
  /* [7][0][][] */ -63,-2,5,96,127,-32,-35,2, 
  /* [8][0][][] */ 76,3,-2,-127,3,-29,-40,-28, 
  /* [9][0][][] */ -10,-127,-7,-2,0,90,-55,93, 
  /* [10][0][][] */ -97,-16,-4,17,-127,77,69,-11, 
  /* [11][0][][] */ 107,13,35,16,-59,-40,-28,-127, 
  /* [12][0][][] */ 1,13,38,-4,12,-77,127,64, 
  /* [13][0][][] */ 62,-23,-9,-15,121,127,112,-41, 
  /* [14][0][][] */ 127,52,-8,20,-96,-21,-23,-24, 
  /* [15][0][][] */ -14,-127,18,-16,6,3,5,34, 
  /* [16][0][][] */ -49,-15,0,-5,-127,2,17,4, 
  /* [17][0][][] */ -26,100,-107,6,13,-127,106,-83, 
  /* [18][0][][] */ 127,-28,-46,16,-57,27,12,106, 
  /* [19][0][][] */ 127,-52,-32,-7,53,-1,32,12, 
  /* [20][0][][] */ 127,22,-13,119,-6,38,-5,-58, 
  /* [21][0][][] */ 7,37,-52,6,-21,85,-127,-85, 
  /* [22][0][][] */ -127,23,31,-11,-40,4,-59,-29, 
  /* [23][0][][] */ -45,-57,3,18,-127,61,73,-16, 
  /* [24][0][][] */ 127,-2,-4,-8,-88,-14,0,4, 
  /* [25][0][][] */ 19,-13,-2,-21,127,49,55,-32, 
  /* [26][0][][] */ -4,-94,11,-34,1,-127,77,-45, 
  /* [27][0][][] */ -18,-127,28,-14,-3,-56,30,-8, 
  /* [28][0][][] */ -108,38,-24,8,-16,-26,127,93, 
  /* [29][0][][] */ -13,46,13,9,-1,38,-100,-127, 
  /* [30][0][][] */ 127,-31,6,5,-89,3,-50,-21, 
  /* [31][0][][] */ -9,-38,56,-8,18,-119,127,83, 
  /* [32][0][][] */ -84,20,3,6,-127,-104,-107,57, 
  /* [33][0][][] */ -29,16,3,21,-127,-57,-51,17, 
  /* [34][0][][] */ 14,-127,49,-6,-3,85,-71,63, 
  /* [35][0][][] */ -20,-46,-127,-6,-2,-65,43,-53, 
  /* [36][0][][] */ 5,127,63,9,-15,12,-22,-44, 
  /* [37][0][][] */ -127,29,40,-21,53,-31,-9,-110, 
  /* [38][0][][] */ -127,-18,-50,-15,45,24,36,115, 
  /* [39][0][][] */ -2,-39,65,3,13,-79,127,100, 
  /* [40][0][][] */ -33,-11,-15,-33,-127,110,121,-33, 
  /* [41][0][][] */ -127,43,12,-71,-97,-92,-104,48, 
  /* [42][0][][] */ -39,-127,-103,-7,-10,75,-120,-88, 
  /* [43][0][][] */ -70,3,-15,-127,95,66,60,6, 
  /* [44][0][][] */ 127,-6,12,-91,22,-34,-11,41, 
  /* [45][0][][] */ -21,-127,-5,-9,-5,-58,75,4, 
  /* [46][0][][] */ 108,-6,-8,-22,127,-38,-26,6, 
  /* [47][0][][] */ 127,-1,4,101,-10,26,8,-45, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00064460886642336845, 0.0016512416768819094, 0.00054740539053454995, 0.00054081535199657083, 0.00041082865209318697, 0.00047325974446721375, 0.00078898773062974215, 0.00045132834929972887, 0.00064654339803382754, 0.0013879508478567004, 0.0016179339727386832, 0.00047592114424332976, 0.00076455093221738935, 0.0013430841499939561, 0.00023769149265717715, 0.00075010897126048803, 0.0005310416454449296, 0.00068881345214322209, 0.00054601096780970693, 0.00056028924882411957, 0.00055623968364670873, 0.0004463900113478303, 0.00075127481250092387, 0.00030645812512375414, 0.00054014736087992787, 0.00058954826090484858, 0.0032508645672351122, 0.0007263285806402564, 0.00033805493148975074, 0.00080654682824388146, 0.00047994763008318841, 0.00036216876469552517, 0.0013099033385515213, 0.00050154817290604115, 0.0015400524716824293, 0.00098839635029435158, 0.001268486026674509, 0.00079167023068293929, 0.00035187078174203634, 0.00065032602287828922, 0.00030004445579834282, 0.00044862789218313992, 0.00067798735108226538, 0.00048847729340195656, 0.0033075285609811544, 0.00069715257268399, 0.00061647564871236682, 0.0020337370224297047, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -36215, 21322, -13610, -13298, 19179, -3816, 33566, 42784, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045257364399731159, 0.00077429669909179211, 0.0016854484565556049, 0.0015939756995067, 0.00078520592069253325, 0.00065020367037504911, 0.00068863970227539539, 0.00097857264336198568, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -54,-12,-40,12,7,-23,2,1,-113,127,-34,104,114,9,67,-17,-8,-38,8,0,-8,-2,-25,-35,22,-87,6,67,-9,15,20,-32,3,-73,106,14,-9,-7,-7,-20,106,-4,39,-20,-34,19,-15,-20, 
  /* [1][0][][] */ -9,34,127,9,-4,-22,4,-76,24,3,22,7,-17,5,-7,-109,11,-50,6,7,-28,34,26,-36,-17,-11,10,-2,11,-6,14,1,-3,11,21,15,-11,-28,62,-57,17,35,-10,25,-16,10,26,-2, 
  /* [2][0][][] */ 3,-47,20,-40,34,28,-5,-27,7,-3,-2,13,-11,54,8,3,-39,127,-26,-34,-14,22,-35,-10,117,-1,1,-7,-25,-11,1,-40,-10,-16,1,9,-10,1,-13,9,18,-21,-16,0,1,25,-23,-36, 
  /* [3][0][][] */ 2,-88,-2,7,1,-7,-11,-4,-10,-12,19,21,13,-8,48,3,-7,-19,4,26,-10,20,-23,2,6,53,3,5,-9,1,127,2,12,11,-5,2,-19,-15,-11,10,-6,5,-9,28,-9,2,0,35, 
  /* [4][0][][] */ -98,11,0,3,3,-35,-1,7,46,-43,21,-21,-29,-1,-8,-5,1,9,3,22,14,-25,16,-2,-6,44,8,110,8,4,-6,-24,0,-127,-32,7,-1,0,-1,4,-51,-11,-10,20,-54,0,7,12, 
  /* [5][0][][] */ -21,29,26,9,-46,9,0,38,24,-1,15,3,-4,-39,7,35,1,-76,23,6,45,-39,10,35,14,2,-72,-45,-37,-29,22,-1,-6,-62,-6,-65,62,18,-45,12,25,-46,5,8,127,-8,-39,-5, 
  /* [6][0][][] */ -29,-22,-20,-7,39,-30,-1,-24,-11,-4,36,-20,-9,41,-4,-59,-1,1,1,-31,-36,50,-10,-77,2,-8,-52,-63,24,47,-16,3,8,-61,-10,61,-72,-51,4,-56,-16,9,13,42,127,-37,38,15, 
  /* [7][0][][] */ 16,36,-74,28,-24,10,5,58,-6,-4,64,-34,11,-32,-7,0,-19,-127,42,-41,61,36,17,-56,19,-18,25,2,-18,33,-14,1,0,36,-4,-26,-8,-51,-37,-64,-17,-32,41,65,-31,-23,-3,4, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019234379753470421, 0.032907608896493912, 0.071631558239459991, 0.067743964493274689, 0.033371251076459885, 0.027633655816316605, 0.029267186298966408, 0.041589338332414627, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52409, -80, 7879, -306, 5964, -6290, 1990, 25145, 1481, 42218, -2561, 33493, -6842, -1032, 30251, 11328, 779, 18562, 40998, 11305, 111, -314, 434, 17414, -8127, 31647, 45662, 33774, 3489, 1946, -2050, 1411, 1086, 16535, -7019, 17784, -11388, 15882, -22799, 129186, 26413, 20934, 13424, -1837, 15552, 3139, 1645, 289, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031803012825548649, 0.00023529754253104329, 0.00019850087119266391, 0.00016612793842796236, 0.00010816702706506476, 9.5062954642344266e-05, 0.00059348961804062128, 0.00013860345643479377, 0.00011415887274779379, 0.00011751245619961992, 7.3437739047221839e-05, 0.00012923694157507271, 0.00024633159046061337, 0.00019352635717950761, 8.3302766142878681e-05, 0.00014059590466786176, 0.00020537841191980988, 0.0002143100427929312, 5.8567995438352227e-05, 0.00016246248560491949, 0.00017357895558234304, 0.00021872075740247965, 0.00013044383376836777, 0.0001195636359625496, 0.00016991655866149813, 0.00011329781409585848, 0.00055446452461183071, 9.9650140327867121e-05, 0.0001758206490194425, 0.00043142237700521946, 0.00011256631842115894, 0.00018630755948834121, 0.00075196439865976572, 0.0001779457088559866, 0.00017053769261110574, 0.00013821317406836897, 0.00031837169080972672, 0.00015500262088607997, 0.00026657254784367979, 2.0172938093310222e-05, 0.00012270045408513397, 5.1940423873020336e-05, 0.00012103348126402125, 0.00012447602057363838, 0.00015518791042268276, 9.2935013526584953e-05, 0.00020368595141917467, 8.2597987784538418e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,4,82,0,28,15,8,9,8,-8,-9,-45,9,-3,8,-23,-114,-7,-22,127,-10,-3,6,-5,8,-4,5,16,99,20,28,38,-27,1,34,-1,1,17,-68,-9,-8,16,3,-7,-10, 127,10,15,-127,28,87,11,10,124,127,7,44,-50,-24,5,8,127,-56,-60,-56,-101,25,-110,14,17,71,-31,-84,24,21,10,-125,6,-62,127,10,-39,-47,-6,115,-79,-98,-30,3,-35,-8,-127,23, -31,-3,8,15,-1,65,4,17,28,9,-14,32,-14,-3,16,4,-104,29,-3,78,-32,-12,-18,-7,-4,-59,-3,29,-16,5,4,-22,8,-24,17,-19,0,47,41,-13,50,38,-15,11,-44,3,-2,-6, 
  /* [0][1][][] */ 125,7,1,-98,14,-26,35,-16,9,9,-12,54,-6,-1,18,-32,-1,-50,-60,-86,10,-74,-125,-18,5,98,-15,-127,-8,33,12,-109,17,-53,-2,127,-3,58,-41,41,-62,-127,38,-88,-45,-13,-13,-5, 26,-127,-127,115,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-84,127,127,-107,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-28,-41,127,-127,127,127,127,-80,127,127,127,-120,101,106, 54,5,49,-13,5,-61,44,18,-23,15,-105,-7,1,-40,127,5,63,-66,-71,86,13,-46,11,-33,1,7,-37,69,21,40,0,2,33,-45,9,67,-5,65,69,-10,-81,8,-84,-31,26,-15,-11,5, 
  /* [0][2][][] */ -53,-7,25,-16,6,35,-37,22,7,-24,11,33,7,-6,-38,18,4,22,-14,106,6,-32,-16,-12,-4,21,0,51,-9,3,46,-32,-18,-44,-31,-39,-1,31,9,-22,9,-5,42,-37,-37,19,-11,17, 68,126,75,21,16,-20,124,35,18,-3,43,27,-5,-1,-91,25,-59,-57,-37,123,-37,49,12,20,32,-64,-40,30,77,1,127,21,86,-26,8,-35,-25,-17,-12,119,-27,-13,-40,45,20,-31,7,-127, -41,-4,7,-3,5,-5,-61,8,-19,-10,-40,-39,20,-9,-8,12,33,24,-10,-127,23,-10,4,-9,-7,10,-10,-54,-14,8,6,8,-20,87,-36,-22,-5,36,25,-61,5,8,-37,7,-44,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013516280800104141, 0.010000145062804222, 0.0084362868219614029, 0.0070604374632239342, 0.0045970985665917397, 0.0040401755832135677, 0.025223307311534882, 0.0058906469494104385, 0.0048517519608139992, 0.0049942792393267155, 0.0031211038585752249, 0.0054925698786973953, 0.010469092056155205, 0.008224870078265667, 0.0035403675865381956, 0.0059753255918622017, 0.0087285824120044708, 0.0091081764549016953, 0.0024891397915780544, 0.0069046556018292904, 0.0073771052993834019, 0.0092956321313977242, 0.0055438629351556301, 0.0050814542919397354, 0.0072214533574879169, 0.0048151570372283459, 0.023564741015434265, 0.0042351307347416878, 0.0074723772704601288, 0.018335450440645218, 0.0047840685583651066, 0.0079180710017681122, 0.031958486884832382, 0.0075626927427947521, 0.0072478516958653927, 0.0058740596286952496, 0.013530796393752098, 0.006587611511349678, 0.011329333297908306, 0.00085734983440488577, 0.0052147689275443554, 0.0022074680309742689, 0.0051439227536320686, 0.0052902307361364365, 0.0065954863093793392, 0.0039497381076216698, 0.008656652644276619, 0.0035104143898934126, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 59440, 7596, 6777, 7087, 1580, 11355, -2234, -271, 953, 2227, 3512, 309, 2042, -871, 749, -2109, 6001, 13533, -269, 26725, 5392, 2972, 10357, -563, 3732, 5562, 27060, 10742, -82, -2861, 149, 2307, -2394, 10378, 2690, 6703, 8045, 4769, 23382, 1751, -1157, 2759, 1155, 3766, 5135, 2364, -1631, 2855, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.2491442551836371e-05, 0.00029707539943046868, 0.00022572763555217534, 0.00045460203546099365, 0.0014095156220719218, 0.00044424927909858525, 0.00085923325968906283, 0.0010913277510553598, 0.00057334679877385497, 0.00062049634288996458, 0.00063722411869093776, 0.00051478407112881541, 0.00046630488941445947, 0.00052211293950676918, 0.00056091946316882968, 0.0017182318260893226, 0.00027038366533815861, 0.00031235971255227923, 0.001852002926170826, 0.00010086754627991468, 0.00022743856243323535, 0.00033483654260635376, 0.00038541262620128691, 0.00093665049644187093, 0.00032593953073956072, 0.00021252834994811565, 0.00014962001296225935, 0.0003399508714210242, 0.00083787261974066496, 0.00091338413767516613, 0.00050944479880854487, 0.0003672039310913533, 0.00083481508772820234, 0.00021311618911568075, 0.00038518788642250001, 0.00027605379000306129, 0.00045562887680716813, 0.0002837875799741596, 0.00010093457240145653, 0.002602697815746069, 0.00051999575225636363, 0.0010073855519294739, 0.00041078112553805113, 0.00039521188591606915, 0.00023372244322672486, 0.00045337495976127684, 0.0007036361494101584, 0.00093309168005362153, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,30,0,-15,127,32,-47,-24, 
  /* [1][0][][] */ -3,1,2,127,9,-6,8,13, 
  /* [2][0][][] */ 21,-127,-21,36,-12,-72,81,16, 
  /* [3][0][][] */ 127,-26,-9,17,-12,-36,28,5, 
  /* [4][0][][] */ 14,-47,127,-13,-7,-48,13,-91, 
  /* [5][0][][] */ 79,11,-1,-4,127,4,-6,-7, 
  /* [6][0][][] */ -10,94,-14,127,27,55,-74,-56, 
  /* [7][0][][] */ -3,127,-4,3,-1,-10,13,-4, 
  /* [8][0][][] */ 127,46,-4,3,-48,-27,2,-32, 
  /* [9][0][][] */ -127,21,4,15,48,11,-7,-3, 
  /* [10][0][][] */ -73,-9,16,127,42,24,-14,2, 
  /* [11][0][][] */ -127,2,15,-65,42,14,-23,-48, 
  /* [12][0][][] */ 127,31,8,18,-48,-9,2,-48, 
  /* [13][0][][] */ -17,76,-127,-5,-1,99,-76,74, 
  /* [14][0][][] */ -42,-19,-13,127,22,2,-3,-24, 
  /* [15][0][][] */ -5,127,0,-1,-1,-17,12,-47, 
  /* [16][0][][] */ -14,-125,-28,-4,-11,-109,127,-31, 
  /* [17][0][][] */ 22,127,6,-12,10,79,-90,-16, 
  /* [18][0][][] */ -14,45,-127,-4,0,52,-31,60, 
  /* [19][0][][] */ -74,12,3,3,-127,9,20,26, 
  /* [20][0][][] */ -127,-29,1,1,81,-33,47,7, 
  /* [21][0][][] */ -63,-1,3,0,-127,-2,16,7, 
  /* [22][0][][] */ -127,-29,-6,-7,94,-17,35,54, 
  /* [23][0][][] */ -16,-22,-6,-9,-2,84,-127,-93, 
  /* [24][0][][] */ -10,37,-127,6,7,45,-15,77, 
  /* [25][0][][] */ 113,-45,1,127,-79,-13,2,-51, 
  /* [26][0][][] */ 0,-19,-8,-1,-12,115,127,-27, 
  /* [27][0][][] */ 69,-1,1,16,127,30,38,-25, 
  /* [28][0][][] */ 6,127,-73,4,5,78,-28,122, 
  /* [29][0][][] */ -4,12,-1,-8,-3,90,-127,-85, 
  /* [30][0][][] */ 1,-3,2,-127,-4,-1,-3,-14, 
  /* [31][0][][] */ -56,-3,6,5,-127,11,15,4, 
  /* [32][0][][] */ -16,45,16,-127,-5,35,-98,-115, 
  /* [33][0][][] */ -58,-14,0,0,-127,42,41,6, 
  /* [34][0][][] */ -127,82,3,22,40,-17,2,1, 
  /* [35][0][][] */ -30,127,-8,-2,-6,-98,77,-23, 
  /* [36][0][][] */ 1,50,9,-28,-2,95,-127,-28, 
  /* [37][0][][] */ 39,-61,-15,21,19,-127,126,-25, 
  /* [38][0][][] */ 10,-127,14,3,6,70,-69,59, 
  /* [39][0][][] */ 4,-127,-17,-8,-7,-11,-48,-102, 
  /* [40][0][][] */ 122,38,9,-10,-40,83,-127,-100, 
  /* [41][0][][] */ 19,-125,26,1,-1,83,-60,127, 
  /* [42][0][][] */ 49,-13,-10,-127,-46,-8,5,-25, 
  /* [43][0][][] */ -87,-27,10,-127,62,11,-15,-5, 
  /* [44][0][][] */ 0,-28,-9,17,-27,107,127,-20, 
  /* [45][0][][] */ -127,-35,-3,1,6,13,18,-20, 
  /* [46][0][][] */ 19,82,127,5,-6,18,16,20, 
  /* [47][0][][] */ 2,10,3,127,13,-2,7,-7, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00018803286366164684, 0.00077057280577719212, 0.00058550649555400014, 0.001179175334982574, 0.0036560902372002602, 0.0011523216962814331, 0.0022287331521511078, 0.0028307544998824596, 0.0014871829189360142, 0.0016094823367893696, 0.0016528719570487738, 0.0013352792011573911, 0.0012095308629795909, 0.0013542893575504422, 0.0014549480983987451, 0.0044568576849997044, 0.0007013381109572947, 0.00081021821824833751, 0.0048038414679467678, 0.00026163656730204821, 0.00058994442224502563, 0.0008685200591571629, 0.00099970749579370022, 0.0024295428302139044, 0.00084544240962713957, 0.00055126938968896866, 0.00038809378747828305, 0.00088178593432530761, 0.0021733266767114401, 0.0023691931273788214, 0.0013214298523962498, 0.00095247657736763358, 0.0021653957664966583, 0.00055279413936659694, 0.00099912448786199093, 0.00071604561526328325, 0.0011818388011306524, 0.00073610607068985701, 0.00026181043358519673, 0.0067510409280657768, 0.0013487975811585784, 0.002613019896671176, 0.0010655098594725132, 0.0010251253843307495, 0.00060624396428465843, 0.0011759924236685038, 0.0018251355504617095, 0.0024203117936849594, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -6463, -24979, 25281, 21244, 3853, 770, 37597, 8736, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0012157100718468428, 0.00066400505602359772, 0.0015208721160888672, 0.0011604228056967258, 0.0011082967976108193, 0.0011909707682207227, 0.0009119710884988308, 0.00076698156772181392, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -10,0,11,-91,9,25,6,8,1,5,3,-2,97,0,2,6,0,-11,-6,0,77,-6,2,5,27,36,15,12,5,4,3,-127,9,6,0,-2,-29,1,-13,34,7,-26,-9,4,0,-2,2,1, 
  /* [1][0][][] */ -38,-8,-4,-5,44,30,-28,73,23,6,-30,-23,11,0,17,35,0,38,18,-46,0,18,127,21,-26,-1,53,2,18,-2,16,-11,17,-7,-9,-21,9,-53,13,3,-5,-8,-80,-10,-34,6,-50,-96, 
  /* [2][0][][] */ -63,15,0,8,47,-9,30,22,-5,58,10,-7,6,0,7,57,0,13,-127,26,4,12,5,-19,-31,7,36,8,7,30,27,7,7,-6,-12,-10,13,6,2,-1,39,-9,-29,-2,27,-61,27,18, 
  /* [3][0][][] */ 2,3,-1,6,-4,30,-1,-1,66,17,-1,-1,28,0,-30,-10,0,-2,-11,0,-3,1,7,-17,-10,-5,-7,-2,-8,-5,-1,-9,-50,42,-54,-1,6,2,3,-127,0,2,-1,-49,-5,-1,-2,5, 
  /* [4][0][][] */ -1,-5,85,34,6,-21,1,-5,3,-6,-1,-4,-81,0,-11,6,0,10,8,-2,68,6,2,-9,-12,35,-9,46,-6,-1,3,103,3,2,0,-3,18,-15,-13,-18,-5,-127,5,2,0,-6,0,-1, 
  /* [5][0][][] */ -8,42,2,-9,6,47,26,12,-19,30,5,51,27,0,-127,0,0,12,-35,22,-8,11,-13,38,-18,1,26,0,-15,21,25,-15,51,28,-36,-3,1,18,-48,16,25,-12,-9,28,22,57,21,24, 
  /* [6][0][][] */ -24,-54,0,9,38,-47,-19,7,28,-26,-10,87,-7,0,-127,39,0,-8,50,-20,-8,-1,25,-31,29,-4,-2,-13,46,-14,-14,-4,92,-32,28,1,1,-10,-70,-22,-13,-14,-7,-26,-24,-80,-18,-28, 
  /* [7][0][][] */ -113,-24,-10,8,127,20,66,25,14,10,26,-33,-29,0,87,101,0,16,-1,58,-12,0,-32,46,16,9,42,9,48,64,55,-9,-13,-14,-22,-22,10,23,26,33,73,1,-27,-11,61,3,67,78, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.051667675375938416, 0.028220213949680328, 0.064637064933776855, 0.049317967146635056, 0.047102611511945724, 0.050616256892681122, 0.038758769631385803, 0.032596714794635773, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 69820, 53431, 62159, 42706, -9, 13563, 2310, 32784, 23279, 35142, 30360, 8790, -46868, -127, 36366, 617, -204, 38712, -740, 1196, -15832, 7977, 43013, 39340, -21447, 29019, 44392, 20682, -2334, 15602, -7967, -50252, 10710, 111684, 26061, 822, 59891, -128, 147010, -27930, 14735, -28132, 818, 104801, -704, 65789, 1389, -22162, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.611755765741691e-05, 7.6408774475567043e-05, 0.00018105763592757285, 0.00012797351519111544, 0.00013669533655047417, 0.0001677215623203665, 0.0001236961834365502, 5.337468974175863e-05, 9.2085596406832337e-05, 3.0410257750190794e-05, 8.3978069596923888e-05, 2.4522099920432083e-05, 0.00017830269644036889, 0.005541567225009203, 7.0760943344794214e-05, 0.00021996167197357863, 0.0027484172023832798, 1.882313154055737e-05, 0.00010829202074091882, 0.000175638691871427, 0.00011007343709934503, 0.00013443120406009257, 0.00014160509454086423, 3.4892524126917124e-05, 9.1710040578618646e-05, 9.5343770226463675e-05, 3.513020055834204e-05, 4.0539900510339066e-05, 0.00029307743534445763, 4.6690667659277096e-05, 4.2248037061654031e-05, 0.0001836187148001045, 0.00022814828844275326, 9.4892111519584432e-06, 8.9459070295561105e-05, 0.00024533900432288647, 1.6754689568188041e-05, 0.0004267758340574801, 3.1456482247449458e-05, 9.7153948445338756e-05, 5.6337674323003739e-05, 0.00023331346164923161, 0.00012332602636888623, 1.0438041499583051e-05, 0.00013411806139629334, 9.2658810899592936e-05, 0.00020813381706830114, 0.00015144060307648033, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-21,-7,-17,8,-39,-79,-68,-27,-50,8,66,34,-71,114,-42,-113,-85,37,-6,-1,-72,-111,-80,-36,-124,-63,-22,71,15,95,26,-127,-87,-8,53,19,48,-127,78,-76,-14,105,-109,-3,-35,-87,108, 75,12,-28,-29,58,-127,-127,-82,61,-76,-115,110,37,-82,-1,62,-52,-113,59,7,11,-113,-127,-70,-4,-127,-119,-40,-54,21,-56,54,29,-127,64,83,13,72,-92,127,-127,6,125,-127,1,-22,-127,95, -32,44,6,-5,-64,-108,-58,-18,87,-8,-127,39,8,-71,-101,-11,-127,-25,27,12,-15,-76,-36,-24,-12,-30,-57,-11,-9,17,-24,9,107,-86,70,31,14,36,-4,16,-79,3,7,-79,-17,5,-55,15, 
  /* [0][1][][] */ -86,-127,-44,-43,-10,55,98,-104,-27,-108,-20,112,90,-64,27,-97,-121,-93,90,-76,41,-88,-103,-127,41,-119,-78,-39,127,-59,127,84,-44,-84,-15,83,-35,-77,-106,89,41,59,105,-108,-92,-117,82,120, 127,-83,-127,-127,127,41,93,-127,101,-127,-110,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-120,-120,127,-99,-127,-127,-120,-127,-70,127,29,-111,127,127,-68,-127,-97,90,60,127,127,-116,-113,-127,125,127, -52,32,-61,-84,-119,-23,31,-37,127,-20,-76,35,56,-70,-25,-44,-37,-30,54,-71,56,-82,-39,-23,47,-5,-46,-60,15,-88,-35,20,29,-98,116,22,-36,-62,2,-15,37,53,10,-74,-58,-37,65,35, 
  /* [0][2][][] */ -60,-107,-34,-35,0,35,-5,-34,-39,-59,-16,59,77,-127,-127,-64,-43,-19,64,75,52,-32,-13,-59,33,-56,-10,-59,75,28,77,62,108,-26,-38,-9,-95,35,-18,31,9,38,14,-55,95,-77,3,31, 88,-74,-89,-86,81,19,7,-46,47,-71,-32,55,83,-26,15,92,-24,-32,77,118,82,-53,-19,-56,94,-68,-18,-100,-51,39,-45,111,-18,-49,67,7,-127,50,-15,-1,11,32,14,-66,127,-100,-12,40, -28,30,-42,-37,-80,-18,22,-11,58,-5,-12,32,31,-43,111,-29,-93,-5,30,60,74,-27,-2,-2,43,2,-3,-65,-13,28,-20,39,-90,-43,65,3,-20,21,27,-38,7,35,-6,-14,62,-35,-4,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036599962040781975, 0.0032473728060722351, 0.0076949493959546089, 0.0054388744756579399, 0.0058095515705645084, 0.0071281665004789829, 0.0052570877596735954, 0.0022684242576360703, 0.0039136377163231373, 0.0012924359180033207, 0.0035690679214894772, 0.0010421891929581761, 0.0075778644531965256, 0.23551659286022186, 0.0030073400121182203, 0.0093483710661530495, 0.1168077290058136, 0.00079998304136097431, 0.0046024108305573463, 0.0074646440334618092, 0.0046781208366155624, 0.0057133259251713753, 0.0060182162560522556, 0.0014829322462901473, 0.0038976767100393772, 0.0040521100163459778, 0.0014930334873497486, 0.0017229457153007388, 0.012455791234970093, 0.0019843534100800753, 0.0017955414950847626, 0.0078037953935563564, 0.0096963020041584969, 0.00040329145849682391, 0.0038020103238523006, 0.010426906868815422, 0.00071207428118214011, 0.018137972801923752, 0.0013369005173444748, 0.004129042848944664, 0.0023943511769175529, 0.0099158221855759621, 0.0052413558587431908, 0.00044361676555126905, 0.0057000173255801201, 0.003937999252229929, 0.0088456869125366211, 0.0064362254925072193, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4858, 89, 11683, 8386, 8877, 8298, 14013, -72, 16, -334, 2664, 549, 14879, -99140808, 3489, 24141, -80031608, -135, -433, 15091, 4652, -25, 43, 463, 4320, -978, 82, 762, 4480, 2103, 2712, 16469, 4638, 422, 367, -2710, 512, 3685, -171, 16156, 2735, 15287, -463, -111, 15824, 162, 13368, 5177, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043511690455488861, 0.00034877026337198913, 0.00027198315365239978, 0.00022721770801581442, 0.00022498106409329921, 0.00025161908706650138, 0.00027281328220851719, 0.0010619673412293196, 0.00034090911503881216, 0.0022200772073119879, 0.00056462397333234549, 0.0015343305421993136, 0.00014927636948414147, 1.6358920884584904e-09, 0.00075845391256734729, 0.0001368691009702161, 1.6358920884584904e-09, 0.0052324831485748291, 0.00038440432399511337, 0.0002560826251283288, 0.00023523837444372475, 0.0038256468251347542, 0.00026677700225263834, 0.0013671653578057885, 0.00087963399710133672, 0.00054759270278736949, 0.0018441787688061595, 0.0016066392417997122, 0.00025013944832608104, 0.0013969219289720058, 0.0010830997489392757, 0.00014173281670082361, 0.00016847587539814413, 0.0076499572023749352, 0.00037860701559111476, 0.00044640753185376525, 0.0030099879950284958, 0.00034398597199469805, 0.002213186351582408, 0.00021489709615707397, 0.0010343970498070121, 0.00014512074994854629, 0.00034637085627764463, 0.0072756358422338963, 0.00031616934575140476, 0.00045602026511915028, 0.00020940405374858528, 0.00016624975251033902, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,-127,50,-44,28,-16,-47,22, 
  /* [1][0][][] */ 79,64,-22,-106,14,-7,-83,127, 
  /* [2][0][][] */ 31,8,-37,127,58,120,39,92, 
  /* [3][0][][] */ 84,75,-77,127,-101,-9,-12,15, 
  /* [4][0][][] */ -35,-104,69,7,5,26,-47,-127, 
  /* [5][0][][] */ 20,1,-38,40,8,-32,42,127, 
  /* [6][0][][] */ 60,-26,-127,-79,110,12,48,-30, 
  /* [7][0][][] */ 127,18,22,-24,30,-6,85,-57, 
  /* [8][0][][] */ 21,-93,10,94,0,20,-7,-127, 
  /* [9][0][][] */ 97,-127,11,-8,-6,18,-113,78, 
  /* [10][0][][] */ -127,-37,-99,14,-7,9,-99,42, 
  /* [11][0][][] */ -22,-46,-11,-107,-127,-30,52,-15, 
  /* [12][0][][] */ 16,10,-33,68,-76,-23,54,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -2,-35,-6,11,47,127,46,44, 
  /* [15][0][][] */ 41,4,17,-127,64,37,-55,74, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 14,23,127,21,-28,-5,25,27, 
  /* [18][0][][] */ 83,-127,23,27,1,26,-113,-1, 
  /* [19][0][][] */ -127,-19,26,70,-49,-58,-105,67, 
  /* [20][0][][] */ 32,33,-40,106,-20,-127,-8,55, 
  /* [21][0][][] */ 53,23,127,7,-14,-8,64,10, 
  /* [22][0][][] */ -80,-16,-127,6,4,6,-103,4, 
  /* [23][0][][] */ -95,116,-20,-24,7,-9,127,-78, 
  /* [24][0][][] */ 7,-56,-53,83,-9,-61,100,127, 
  /* [25][0][][] */ 9,42,34,29,127,118,-77,-52, 
  /* [26][0][][] */ -82,-33,-127,-2,6,18,-93,-1, 
  /* [27][0][][] */ 1,-26,-29,2,-47,127,72,54, 
  /* [28][0][][] */ 8,-22,-18,36,21,127,48,57, 
  /* [29][0][][] */ 88,24,127,-1,-17,-11,86,-10, 
  /* [30][0][][] */ -79,127,-27,-31,11,-7,103,-45, 
  /* [31][0][][] */ -40,-93,-21,4,26,-66,127,107, 
  /* [32][0][][] */ 8,0,-53,113,-5,92,84,127, 
  /* [33][0][][] */ 0,59,-11,-113,15,-3,-5,127, 
  /* [34][0][][] */ -27,84,-8,-100,35,-8,18,127, 
  /* [35][0][][] */ 127,8,-10,-45,21,34,96,-42, 
  /* [36][0][][] */ -127,-11,37,66,-41,18,-119,77, 
  /* [37][0][][] */ -5,-21,-9,24,22,127,52,44, 
  /* [38][0][][] */ 14,19,6,79,127,-8,-19,31, 
  /* [39][0][][] */ 5,26,40,-127,26,-1,-45,124, 
  /* [40][0][][] */ 96,25,127,0,-9,-8,96,-10, 
  /* [41][0][][] */ -1,-30,-28,94,61,127,73,115, 
  /* [42][0][][] */ -79,-4,127,27,-32,18,-29,64, 
  /* [43][0][][] */ -12,-56,6,93,-18,6,15,-127, 
  /* [44][0][][] */ 34,-10,-67,-127,64,-29,-7,-102, 
  /* [45][0][][] */ -86,127,-2,-55,12,2,76,-65, 
  /* [46][0][][] */ -127,-25,32,17,-30,33,-81,34, 
  /* [47][0][][] */ 106,29,120,2,26,-24,127,-10, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010471709538251162, 0.00083936541341245174, 0.0006545663345605135, 0.00054683187045156956, 0.00054144905880093575, 0.00060555728850886226, 0.00065656413789838552, 0.0025557759217917919, 0.000820446468424052, 0.0053429328836500645, 0.001358848181553185, 0.0036925855092704296, 0.00035925488919019699, 3.937008052901092e-09, 0.0018253276357427239, 0.00032939502852968872, 3.937008052901092e-09, 0.012592718005180359, 0.00092512386618182063, 0.00061629939591512084, 0.00056613475317135453, 0.0092069655656814575, 0.0006420369609259069, 0.0032902786042541265, 0.0021169648971408606, 0.0013178600929677486, 0.0044382796622812748, 0.0038666068576276302, 0.00060199631843715906, 0.0033618921879678965, 0.0026066342834383249, 0.00034110026899725199, 0.00040546126547269523, 0.018410714343190193, 0.00091117183910682797, 0.001074343454092741, 0.0072439662180840969, 0.00082785135600715876, 0.0053263488225638866, 0.00051718053873628378, 0.0024894243106245995, 0.00034925382351502776, 0.00083359092241153121, 0.017509857192635536, 0.00076090666698291898, 0.001097477856092155, 0.00050396076403558254, 0.00040010377415455878, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -1286, -43536, -7669, -13533, -31945, -3332, -26753, -27585, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0019298333209007978, 0.0020366902463138103, 0.0023216770496219397, 0.0011015366762876511, 0.0012068566866219044, 0.0020128334872424603, 0.0015590675175189972, 0.00096731976373121142, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-23,2,3,125,-2,0,1,-2,-127,-95,-4,0,125,-3,0, 
  /* [1][0][][] */ 0,-31,-1,87,74,15,24,5,-1,-5,127,-43,0,30,-15,0, 
  /* [2][0][][] */ 0,0,-4,-11,-59,5,9,4,0,3,-16,0,0,127,-7,0, 
  /* [3][0][][] */ 0,-11,-16,-127,82,26,71,16,-2,64,-3,38,0,2,16,0, 
  /* [4][0][][] */ 0,50,-26,34,-57,29,127,12,1,-62,20,-6,0,-6,13,0, 
  /* [5][0][][] */ 0,-15,-9,0,-23,-24,-9,17,-1,11,-7,-46,0,-3,127,0, 
  /* [6][0][][] */ 0,15,-1,4,54,-17,-22,-5,-1,-102,108,63,0,127,60,0, 
  /* [7][0][][] */ 0,13,-12,127,3,-3,20,9,-2,67,-55,74,0,-6,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.082017913460731506, 0.08655933290719986, 0.098671272397041321, 0.046815309673547745, 0.051291406154632568, 0.08554542064666748, 0.066260367631912231, 0.041111089289188385, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 35183, 17377, 15309, 13055, 99372, 13853, 97733, -9339, 8524, 30478, 14177, -445, 26508, 10739, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 7.4544950621202588e-05, 0.00023104704450815916, 0.00023026751296129078, 0.00014452316099777818, 3.3351319871144369e-05, 0.00036950199864804745, 3.9768008718965575e-05, 2.1376410586526617e-05, 0.00021757028298452497, 0.00019178590446244925, 0.00072497624205425382, 0.00072724185883998871, 0.00024362279509659857, 0.00019422346667852253, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-72,67,-94,77,-95,-27,3,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-29,14,-28,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-8,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,33,-25,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-7,38,-39,52,-77,0,0,5,40,2,-27,23, 23,-4,31,-2,-27,39,-34,21,-126,-13,0,85,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0031681603286415339, 0.0098194992169737816, 0.0097863692790269852, 0.0061422344297170639, 0.0014174310490489006, 0.015703834593296051, 0.0016901403432711959, 0.0009084974299184978, 0.0092467367649078369, 0.0081509007140994072, 0.0308114904910326, 0.030907778069376945, 0.010353968478739262, 0.0082544973120093346, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 25956, -119841, -12003, 193339, 31125, 44185, 39366, 450756, 9947, 35620, 845243, -1073741824, 62078, 66698, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.0001947348500834778, 0.00020771885465364903, 4.5234384742798284e-05, 1.2743392289848998e-05, 0.00019259177497588098, 7.4898511229548603e-05, 0.00029505020938813686, 5.8830382840824313e-06, 5.7500681577948853e-05, 8.4011619037482888e-05, 7.0905848588154186e-06, 1.1533876076441629e-09, 5.9989073633914813e-05, 3.5759348975261673e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 49,-3,31, -4,-22,15, -127,-119,-66, 
  /* [1][1][][] */ 3,-4,0, -21,4,-4, 1,-30,6, 
  /* [1][2][][] */ -3,18,-1, -5,8,-2, 40,-18,13, 
  /* [2][0][][] */ 31,-5,-5, 78,114,3, 41,-34,9, 
  /* [2][1][][] */ 13,15,1, 71,127,-25, 21,-1,-4, 
  /* [2][2][][] */ 50,-61,22, 76,-38,-18, 33,-49,17, 
  /* [3][0][][] */ 9,34,3, 35,96,21, 0,4,-6, 
  /* [3][1][][] */ 23,36,5, 71,127,25, -13,-19,3, 
  /* [3][2][][] */ 7,3,4, 27,26,8, -3,-4,3, 
  /* [4][0][][] */ 39,73,-6, 16,84,-8, -21,4,-4, 
  /* [4][1][][] */ 48,95,55, 36,127,37, 28,46,-16, 
  /* [4][2][][] */ 58,79,37, 49,120,14, -24,19,17, 
  /* [5][0][][] */ 10,3,-122, -4,0,-110, -6,28,-29, 
  /* [5][1][][] */ 6,-43,-127, 0,-45,-114, 1,15,-21, 
  /* [5][2][][] */ 2,12,-15, 6,1,-9, 5,17,-8, 
  /* [6][0][][] */ 25,-62,37, 50,-86,43, 7,-20,11, 
  /* [6][1][][] */ 39,-95,66, 66,-127,76, 6,-28,20, 
  /* [6][2][][] */ 19,-34,16, 12,-44,29, -16,5,0, 
  /* [7][0][][] */ -34,12,1, -110,-44,-1, -23,21,0, 
  /* [7][1][][] */ -13,-11,-1, -127,-99,-10, -2,-7,3, 
  /* [7][2][][] */ -22,29,-11, -11,9,-3, -18,25,-5, 
  /* [8][0][][] */ -83,-86,-97, -85,-88,-100, -98,-101,-117, 
  /* [8][1][][] */ -85,-90,-103, -87,-92,-104, -99,-103,-120, 
  /* [8][2][][] */ -66,-74,-49, -68,-73,-41, -104,-111,-127, 
  /* [9][0][][] */ -18,-5,6, -9,-7,-3, 9,4,-17, 
  /* [9][1][][] */ 107,121,-12, 80,127,11, -5,18,23, 
  /* [9][2][][] */ -30,-29,16, -3,-39,-5, 8,0,-24, 
  /* [10][0][][] */ -24,-84,-19, 35,94,19, -7,-13,-3, 
  /* [10][1][][] */ -58,-104,-14, 80,127,14, -16,-27,-1, 
  /* [10][2][][] */ -31,-20,2, 37,22,-12, -7,-1,7, 
  /* [11][0][][] */ -16,-29,-2, 8,-47,4, 6,-109,-59, 
  /* [11][1][][] */ -51,-48,-23, -40,-70,-42, -20,-67,-61, 
  /* [11][2][][] */ -13,-47,-88, 117,127,61, -46,9,-55, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-97,-17, -61,-111,-25, -9,-18,-5, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 8,16,11, 
  /* [13][2][][] */ -7,-19,3, 2,-18,-1, 1,4,-3, 
  /* [14][0][][] */ 44,-9,-40, 77,-28,-52, 29,-12,-22, 
  /* [14][1][][] */ 88,-19,-76, 127,-41,-88, 57,-20,-38, 
  /* [14][2][][] */ 53,-12,-48, 73,-23,-53, 23,-9,-21, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.049657382071018219, 0.052968304604291916, 0.011534767225384712, 0.0032495649065822363, 0.049110900610685349, 0.019099120050668716, 0.07523779571056366, 0.0015001746360212564, 0.014662672765552998, 0.021422961726784706, 0.0018080989830195904, 2.9411381774480105e-07, 0.015297212637960911, 0.0091186333447694778, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.41551658511161804, } };
const TfArray<1, int> quant46_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.3855254054069519, } };
const TfArray<1, int> quant50_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.42771482467651367, } };
const TfArray<1, int> quant53_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.49477145075798035, } };
const TfArray<1, int> quant54_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.25208407640457153, } };
const TfArray<1, int> quant58_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.18286757171154022, } };
const TfArray<1, int> quant61_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27975130081176758, } };
const TfArray<1, int> quant62_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.20725354552268982, } };
const TfArray<1, int> quant65_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.3945462703704834, } };
const TfArray<1, int> quant66_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.061987172812223434, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.079017780721187592, } };
const TfArray<1, int> quant69_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
